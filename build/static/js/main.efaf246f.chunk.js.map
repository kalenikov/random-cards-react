{"version":3,"sources":["common/history.js","redux/song-reducer.ts","api/api.js","redux/app-reducer.ts","redux/thunks.ts","components/Auth0/react-auth0-spa.js","components/Drawer/AppDrawer.js","components/AppBar/SearchAppBar.js","constants/constants.js","components/ErrorPage/ErrorPage.js","components/Info/Main.js","components/Spinner/Spinner.tsx","components/List/List.tsx","components/List/ListContainer.tsx","components/Profile/Profile.js","components/Song/NewSongForm.js","components/Song/SongButtons.js","components/Song/SongTitle.js","components/Song/Song.tsx","common/nl2br.js","components/Song/SongContainer.tsx","components/SongList/SongList.js","components/SongList/SongsListContainer.tsx","redux/store.ts","redux/auth-reducer.ts","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","songsSlice","createSlice","name","initialState","songs","currentSongId","lastSongIndex","currentSongData","isLoading","getOnlyFavor","term","fontSize","editMode","showHidden","reducers","setSongId","state","action","payload","setLastSongIndex","setSongData","toogleGetOnlyFavor","setSongsList","setTerm","setFontSize","setEditMode","setLoadingOn","setLoadingOff","toogleHide","hide","map","song","_id","toogleFavor","favor","actions","reducer","baseURL","instance","axios","headers","SongAPI","get","songId","post","content","delete","data","appSlice","initialized","error","popper","initializedSuccess","setError","getSongsListThunk","dispatch","getState","a","songReducer","response","console","toString","toogleFavorThunk","deleteSongThunk","history","filter","push","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","window","replaceState","document","title","location","pathname","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0Client","loading","setLoading","popupOpen","setPopupOpen","useEffect","createAuth0Client","createdAuth0Client","search","includes","handleRedirectCallback","appState","getUser","getIdTokenClaims","getTokenSilently","token","localStorage","setItem","initAuth0","loginWithPopup","params","Provider","value","loginWithRedirect","getTokenWithPopup","logout","useStyles","makeStyles","theme","createStyles","list","width","drawer","breakpoints","up","flexShrink","AppDrawer","props","classes","Drawer","className","variant","anchor","open","onClose","handleDrawerClose","paper","drawerPaper","role","List","ListItem","ListItemAvatar","Avatar","src","picture","ListItemText","primary","nickname","button","component","Link","to","onClick","Divider","ListItemIcon","FormControlLabel","control","Switch","checked","onChange","color","label","root","flexGrow","menuButton","marginRight","spacing","display","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","connect","toogleGetOnlyFavorUpdateList","setOpen","AppBar","Toolbar","IconButton","edge","aria-label","Typography","noWrap","Button","RouterLink","style","InputBase","ev","currentTarget","placeholder","input","inputProps","ErrorPage","Main","Container","maxWidth","flexDirection","spinner","marginBottom","Spinner","styles","CircularProgress","size","SongList","lists","Profile","alt","email","JSON","stringify","addSongThunk","responce","initialValues","validate","values","log","errors","text","onSubmit","setSubmitting","submitForm","isSubmitting","touched","handleBlur","handleChange","TextField","margin","required","fullWidth","id","onBlur","CheckboxWithLabel","type","Label","rows","innerHeight","multiline","LinearProgress","disabled","flexWrap","fab","bottom","right","floatButtonBlock","top","zIndex","FloatButtonBlock","Box","shuffle","e","changefontSize","toogleEditMode","usePrevious","ref","useRef","current","border","left","background","typography","opacity","SongTitle","useParams","popupState","usePopupState","popupId","favorIconRef","prevFavor","prevId","setAnchorEl","undefined","setTimeout","close","Date","time_last_seen","toLocaleDateString","Popper","anchorEl","bindPopper","Paper","confirm","toogleHideThunk","editable","fontFace","Song","contentEditable","createRef","str","isXhtml","songContent","replace","preventDefault","getSongByRandomThunk","inc","setSongContentThunk","replaceMode","replaceStr","br2nl","innerText","elevation","html","innerRef","spellCheck","SongContainer","prevProps","this","match","getSongByIdThunk","index","Component","length","item","Math","floor","random","status","listContainer","VirtualizedListItem","key","ContainerProps","ContainerComponent","ListItemSecondaryAction","alert","WindowsList","listRef","itemData","itemCount","overscanCount","itemSize","initialScrollOffset","parseInt","Fab","NavLink","getTerm","filtredSongsSelector","createSelector","filteredSongs","cyrillic","charCodeAt","sort","b","logger","createLogger","level","middleware","getDefaultMiddleware","store","configureStore","app","appReducer","authSlice","userInfo","setUserInfo","App","initializeApp","routes","path","exact","render","ListContainer","SongsListContainer","CssBaseline","AppContainer","compose","targetUrl","RandomCardsApp","domain","config","client_id","clientId","audience","redirect_uri","origin","cacheLocation","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.efaf246f.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n","import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    songs: [] as Array<SongType>,\r\n    currentSongId: null,\r\n    lastSongIndex: 0,\r\n    currentSongData: {} as SongType,\r\n    isLoading: false,\r\n    getOnlyFavor: false,\r\n    term: '',\r\n    fontSize: 14,\r\n    editMode: false,\r\n    showHidden: false,\r\n}\r\ntype SongType = {\r\n    _id: string\r\n    name: string\r\n    favor: boolean\r\n    hide: boolean\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst songsSlice = createSlice({\r\n        name: 'songs',\r\n        initialState,\r\n        reducers: {\r\n            setSongId: (state, action) => {\r\n                state.currentSongId = action.payload\r\n            },\r\n            setLastSongIndex: (state, action) => {\r\n                state.lastSongIndex = action.payload\r\n            },\r\n            setSongData: (state, action) => {\r\n                state.currentSongData = action.payload\r\n            },\r\n            toogleGetOnlyFavor: (state) => {\r\n                state.getOnlyFavor = !state.getOnlyFavor\r\n            },\r\n            setSongsList: (state, action) => {\r\n                state.songs = action.payload\r\n            },\r\n            setTerm: (state, action) => {\r\n                state.term = action.payload\r\n            },\r\n            setFontSize: (state, action) => {\r\n                state.fontSize = action.payload\r\n            },\r\n            setEditMode: (state, action) => {\r\n                state.editMode = action.payload\r\n            },\r\n            setLoadingOn: (state) => {\r\n                state.isLoading = true\r\n            },\r\n            setLoadingOff: (state) => {\r\n                state.isLoading = false\r\n            },\r\n            toogleHide: (state, action) => {\r\n                if (state.currentSongData) {\r\n                    state.currentSongData.hide = !state.currentSongData.hide\r\n                }\r\n                state.songs.map((song: SongType) => {\r\n                    if (song._id === action.payload) {\r\n                        song.hide = !song.hide\r\n                    }\r\n                    return song\r\n                })\r\n            },\r\n            toogleFavor: (state, action) => {\r\n                if (state.currentSongData) {\r\n                    state.currentSongData.favor = !state.currentSongData.favor\r\n                }\r\n                state.songs.map((song: SongType) => {\r\n                    if (song._id === action.payload) {\r\n                        song.favor = !song.favor\r\n                    }\r\n                    return song\r\n                })\r\n            },\r\n        }\r\n    }\r\n)\r\n\r\nconst {actions, reducer} = songsSlice\r\n\r\nexport const {\r\n    setSongId,\r\n    setSongData,\r\n    toogleGetOnlyFavor,\r\n    setSongsList,\r\n    setTerm,\r\n    toogleFavor,\r\n    setLoadingOff,\r\n    setLoadingOn,\r\n    setEditMode,\r\n    setFontSize,\r\n    toogleHide,\r\n    setLastSongIndex\r\n} = actions\r\n\r\nexport default reducer\r\n","import * as axios from 'axios'\n\nlet baseURL = ''\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    // baseURL = 'http://localhost:5000/api/v1/'\n    baseURL = 'https://random-cards-server.herokuapp.com/api/v1/'\n} else {\n    // baseURL = 'http://localhost:5000/api/v1/'\n    baseURL = 'https://random-cards-server.herokuapp.com/api/v1/'\n}\n\n\nconst getToken = () =>{\n    return localStorage.getItem('TOKEN')\n}\n\nconst instance =  axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n        // 'Authorization': `Bearer ${getToken()}`\n    },\n})\n\n\nexport const SongAPI = {\n\n    getSongsList(getOnlyFavor) {\n        return instance.get('/cards?limit=999' + (getOnlyFavor ? '&favor=true' : ''))\n        // return instance.get('/cards', {favor: false, name: ''})\n    },\n    getSong(songId) {\n        return instance.get('/cards?id=' + songId)\n    },\n    getSongRandom() {\n        return instance.get('/cards?random=true&limit=1')\n    },\n    setFavor(songId, favor) {\n        const result = instance.post('/cards', {_id: songId, favor: favor})\n        return result\n    },\n    setHide(songId, hide) {\n        const result = instance.post('/cards', {_id: songId, hide: hide})\n        return result\n    },\n    setContent(songId, content) {\n        return instance.post('/cards', {_id: songId, content: content})\n    },\n    addSong(name, content, favor) {\n        return instance.post('/cards/add', {name: name, content: content, favor: favor})\n    },\n    deleteSong(songId) {\n        return instance.delete('/cards', {data: {_id: songId}})\n    }\n}\n\n","import {createSlice} from '@reduxjs/toolkit'\r\nimport {getSongsListThunk} from './thunks'\r\nimport {Dispatch} from \"redux\"\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n    error: '',\r\n    popper: ''\r\n};\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        initializedSuccess: (state) => {\r\n            state.initialized = true\r\n        },\r\n        setError: (state, action)=>{\r\n            state.error = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nconst {actions, reducer} = appSlice\r\nexport const {initializedSuccess, setError} = actions\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getSongsListThunk());\r\n    dispatch(initializedSuccess());\r\n}\r\n\r\n\r\nexport default reducer;\r\n","import {SongAPI} from '../api/api'\r\nimport {setLoadingOff, setLoadingOn, setSongData, setSongId, setSongsList, toogleFavor, toogleGetOnlyFavor, toogleHide, setLastSongIndex} from './song-reducer'\r\nimport {setError} from './app-reducer'\r\nimport {SongType} from \"../constants/types\"\r\n\r\nexport const getSongsListThunk = () => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const getOnlyFavor = getState().songReducer.getOnlyFavor\r\n    try {\r\n        const response = await SongAPI.getSongsList(getOnlyFavor)\r\n        dispatch(setSongsList(response.data))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(setError(e.toString()))\r\n    }\r\n\r\n    dispatch(setLoadingOff())\r\n\r\n}\r\n\r\nexport const getSongByIdThunk = (songId: number, index: number) => async (dispatch: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.getSong(songId)\r\n    if (response.data.length === 1) {\r\n        dispatch(setLoadingOff())\r\n        dispatch(setSongData(response.data[0]))\r\n        dispatch(setLastSongIndex(index))\r\n    }\r\n}\r\n\r\nexport const getSongByRandomThunk = (history: any) => (dispatch: any, getState: any) => {\r\n    const state = getState().songReducer\r\n    let songs = state.songs\r\n    if (state.getOnlyFavor) {\r\n        songs = state.songs.filter((item: SongType) => item.favor)\r\n    }\r\n    const song = songs[Math.floor(Math.random() * songs.length)];\r\n    dispatch(setSongId(song._id))\r\n    history.push('/card/' + song._id)\r\n}\r\n\r\nexport const toogleFavorThunk = (songId: number, favor: boolean) => async (dispatch: any) => {\r\n    await SongAPI.setFavor(songId, !favor)\r\n    dispatch(toogleFavor(songId))\r\n}\r\n\r\nexport const setSongContentThunk = (songId: number, content: string) => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.setContent(songId, content)\r\n    if (response.status === 202) {\r\n        dispatch(setLoadingOff())\r\n        dispatch(setSongData({...getState().songReducer.currentSongData, content: content}))\r\n    }\r\n}\r\nexport const toogleGetOnlyFavorUpdateList = (songId: number, favor: boolean) => (dispatch: any, getState: any) => {\r\n    dispatch(toogleGetOnlyFavor())\r\n    if (getState().songReducer.getOnlyFavor){\r\n        dispatch(setSongsList(getState().songReducer.songs.filter((song: SongType) => song.favor)))\r\n    }\r\n}\r\n\r\nexport const toogleHideThunk = (songId: string, hide: boolean) => async (dispatch: any, getState: any) => {\r\n    await SongAPI.setHide(songId, !hide)\r\n    dispatch(toogleHide(songId))\r\n    dispatch(setSongsList(getState().songReducer.songs.filter((song: SongType) => song._id != songId)))\r\n}\r\n\r\nexport const addSongThunk = (history: any, name: string, content: string, favor: boolean) => async (dispatch: any) => {\r\n    dispatch(setLoadingOn())\r\n    const responce = await SongAPI.addSong(name, content, favor)\r\n    history.push('/card/' + responce.data)\r\n    dispatch(setLoadingOff())\r\n}\r\n\r\nexport const deleteSongThunk = (songId: number, history: any) => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.deleteSong(songId)\r\n    const songs = getState().songReducer.songs\r\n    dispatch(setSongsList(songs.filter((song: any) => song._id != songId)))\r\n    dispatch(setLoadingOff())\r\n    history.push('/cards')\r\n}\r\n\r\n","import React, {useState, useEffect, useContext} from \"react\";\r\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\r\n\r\n\r\nexport const Auth0Context = React.createContext();\r\n\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\n\r\nexport const Auth0Provider = ({\r\n                                  children,\r\n                                  onRedirectCallback = () => window.history.replaceState({}, document.title, window.location.pathname),\r\n                                  ...initOptions\r\n                              }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState();\r\n    const [user, setUser] = useState();\r\n    const [auth0Client, setAuth0Client] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [popupOpen, setPopupOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const initAuth0 = async () => {\r\n            const createdAuth0Client = await createAuth0Client(initOptions);\r\n            setAuth0Client(createdAuth0Client);\r\n\r\n            if (window.location.search.includes(\"code=\") &&\r\n                window.location.search.includes(\"state=\")) {\r\n                const {appState} = await createdAuth0Client.handleRedirectCallback();\r\n                onRedirectCallback(appState);\r\n            }\r\n\r\n            const isAuthenticated = await createdAuth0Client.isAuthenticated();\r\n\r\n            setIsAuthenticated(isAuthenticated);\r\n\r\n            if (isAuthenticated) {\r\n                const user = await createdAuth0Client.getUser();\r\n                setUser(user);\r\n                const claims = await createdAuth0Client.getIdTokenClaims();\r\n                const token = await createdAuth0Client.getTokenSilently();\r\n                localStorage.setItem('TOKEN', token)\r\n                // localStorage.setItem('TOKEN_ALL', claims.__raw)\r\n            }\r\n\r\n            setLoading(false);\r\n        };\r\n        initAuth0();\r\n    }, []);\r\n\r\n    const loginWithPopup = async (params = {}) => {\r\n        setPopupOpen(true);\r\n        try {\r\n            await auth0Client.loginWithPopup(params);\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setPopupOpen(false);\r\n        }\r\n        const user = await auth0Client.getUser();\r\n        setUser(user);\r\n        setIsAuthenticated(true);\r\n    };\r\n\r\n    const handleRedirectCallback = async () => {\r\n        setLoading(true);\r\n        await auth0Client.handleRedirectCallback();\r\n        const user = await auth0Client.getUser();\r\n        setLoading(false);\r\n        setIsAuthenticated(true);\r\n        setUser(user);\r\n    };\r\n    return (\r\n        <Auth0Context.Provider\r\n            value={{\r\n                isAuthenticated,\r\n                user,\r\n                loading,\r\n                popupOpen,\r\n                loginWithPopup,\r\n                handleRedirectCallback,\r\n                getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n                loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n                getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n                getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\r\n                logout: (...p) => auth0Client.logout(...p)\r\n            }}\r\n        >\r\n            {children}\r\n        </Auth0Context.Provider>\r\n    );\r\n};\r\n","import Avatar from \"@material-ui/core/Avatar\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport Drawer from \"@material-ui/core/Drawer\"\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport List from \"@material-ui/core/List\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\r\nimport Switch from '@material-ui/core/Switch'\r\nimport React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {useAuth0} from \"../Auth0/react-auth0-spa\";\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\n\r\n\r\nconst useStyles = makeStyles(theme =>\r\n    createStyles({\r\n        list: {\r\n            width: 250,\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                width: 240,\r\n                flexShrink: 0,\r\n            },\r\n        },\r\n    }))\r\n\r\nconst AppDrawer = (props) => {\r\n\r\n    const {isAuthenticated, loginWithRedirect, logout, user} = useAuth0()\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"temporary\"\r\n            anchor=\"left\"\r\n            open={props.open}\r\n            onClose={props.handleDrawerClose}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <div\r\n                className={classes.list}\r\n                role=\"presentation\"\r\n            >\r\n                <List>\r\n                    {user && <>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar\r\n                                    src={user.picture}\r\n                                />\r\n                            </ListItemAvatar>\r\n\r\n                            <ListItemText primary={user.nickname}/>\r\n\r\n                        </ListItem>\r\n\r\n                        <ListItem button component={Link} to={'/profile'} onClick={props.handleDrawerClose}>\r\n                            <ListItemText primary={\"Profile\"}/>\r\n                        </ListItem>\r\n\r\n                        <Divider/>\r\n                    </>\r\n                    }\r\n\r\n\r\n                    <ListItem onClick={props.handleDrawerClose} button component={Link} to={'/cards'}>\r\n                        <ListItemIcon>\r\n                            <ListIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"My cards\"}/>\r\n                    </ListItem>\r\n\r\n                    <ListItem button component={Link} to={'/lists'}>\r\n                        <ListItemIcon>\r\n                            <LocalOfferIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"My tags\"}/>\r\n                    </ListItem>\r\n\r\n                    <Divider/>\r\n\r\n                    <ListItem>\r\n                        <FormControlLabel\r\n                            control={<Switch\r\n                                checked={props.getOnlyFavor}\r\n                                onChange={() => props.toogleGetOnlyFavor()}\r\n                                name=\"ShowOnlyFavor\"\r\n                                color=\"primary\"\r\n                            />}\r\n                            label=\"Show only favor\"\r\n                        />\r\n                    </ListItem>\r\n\r\n\r\n\r\n                    <ListItem>\r\n                        <FormControlLabel\r\n                            control={<Switch\r\n                                checked={props.getOnlyFavor}\r\n                                onChange={() => props.toogleGetOnlyFavor()}\r\n                                name=\"ShowHide\"\r\n                                color=\"primary\"\r\n                            />}\r\n                            label=\"Show hide\"\r\n                        />\r\n                    </ListItem>\r\n\r\n                    <Divider/>\r\n\r\n\r\n                    {!isAuthenticated &&\r\n                    // <ListItem onClick={props.handleDrawerClose} button component={Link} to={'/sign/'}>\r\n                    <ListItem onClick={() => loginWithRedirect({})} button>\r\n                        <ListItemText primary={\"Login\"}/>\r\n                    </ListItem>\r\n                    }\r\n\r\n                    {isAuthenticated &&\r\n                    // <ListItem onClick={props.handleDrawerClose} button component={Link} to={'/sign/'}>\r\n                    <ListItem onClick={() => logout()} button>\r\n                        <ListItemText primary={\"Logout\"}/>\r\n                    </ListItem>\r\n                    }\r\n\r\n                </List>\r\n            </div>\r\n\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default AppDrawer\r\n","import AppBar from \"@material-ui/core/AppBar\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Container from '@material-ui/core/Container'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport InputBase from \"@material-ui/core/InputBase\"\r\nimport {fade, makeStyles} from \"@material-ui/core/styles\"\r\nimport Switch from \"@material-ui/core/Switch\"\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport React, {useState} from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport {Link as RouterLink} from \"react-router-dom\"\r\nimport {APP_HEADER} from \"../../constants/constants\"\r\nimport {setSongsList, setTerm, toogleGetOnlyFavor} from \"../../redux/song-reducer\"\r\nimport {toogleGetOnlyFavorUpdateList} from \"../../redux/thunks\"\r\nimport AppDrawer from \"../Drawer/AppDrawer\"\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            display: \"block\",\r\n        },\r\n    },\r\n    search: {\r\n        position: \"relative\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        \"&:hover\": {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: \"70%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: \"auto\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"12ch\",\r\n            \"&:focus\": {\r\n                width: \"20ch\",\r\n            },\r\n        },\r\n    },\r\n}))\r\n\r\nconst top100Films = [\r\n    {title: 'The Shawshank Redemption', year: 1994},\r\n    {title: 'The Godfather', year: 1972},\r\n    {title: 'The Godfather: Part II', year: 1974},\r\n    {title: 'The Dark Knight', year: 2008},\r\n    {title: '12 Angry Men', year: 1957},]\r\n\r\nconst SearchAppBar = props => {\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = (ev) => {\r\n        setOpen(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"sticky\">\r\n\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        <Button component={RouterLink} to=\"/\" style={{color: \"white\"}}>\r\n                            {APP_HEADER}\r\n                        </Button>\r\n                    </Typography>\r\n\r\n                    {/*<Switch*/}\r\n                    {/*    checked={props.getOnlyFavor}*/}\r\n                    {/*    checkedIcon={<FavoriteIcon/>}*/}\r\n                    {/*    icon={<FavoriteBorderIcon/>}*/}\r\n                    {/*    onChange={() => props.toogleGetOnlyFavor()}*/}\r\n                    {/*/>*/}\r\n\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon/>\r\n                        </div>\r\n                        <InputBase\r\n                            value={props.term}\r\n                            onChange={(ev)=>props.setTerm(ev.currentTarget.value)}\r\n                            placeholder=\"Search…\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            inputProps={{\"aria-label\": \"search\"}}\r\n                        />\r\n                    </div>\r\n\r\n                    {/*<div className={classes.search} style={{color: \"white\"}}>*/}\r\n                    {/*    <Highlights/>*/}\r\n                    {/*</div>*/}\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <AppDrawer\r\n                handleDrawerClose={handleDrawerClose}\r\n                getOnlyFavor={props.getOnlyFavor}\r\n                toogleGetOnlyFavor={props.toogleGetOnlyFavor}\r\n                open={open}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Highlights = () => (\r\n    <Autocomplete\r\n        id=\"highlights-demo\"\r\n        style={{width: 300}}\r\n        options={top100Films}\r\n        getOptionLabel={(option) => option.title}\r\n        renderInput={(params) => (\r\n            <TextField {...params} label=\"Highlights\" variant=\"outlined\" margin=\"normal\"/>\r\n        )}\r\n        renderOption={(option, {inputValue}) => {\r\n            const matches = match(option.title, inputValue);\r\n            const parts = parse(option.title, matches);\r\n\r\n            return (\r\n                <div>\r\n                    {parts.map((part, index) => (\r\n                        <span key={index} style={{fontWeight: part.highlight ? 700 : 400}}>\r\n                {part.text}\r\n              </span>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }}\r\n    />\r\n)\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        getOnlyFavor: state.songReducer.getOnlyFavor,\r\n        term: state.songReducer.term\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        toogleGetOnlyFavor,\r\n        toogleGetOnlyFavorUpdateList,\r\n        setTerm\r\n    })(SearchAppBar)\r\n{/*<Tooltip title=\"All cards\">*/\r\n}\r\n{/*    <IconButton*/\r\n}\r\n{/*        component={NavLink}*/\r\n}\r\n{/*        to={\"/cards/\"}*/\r\n}\r\n{/*        style={{color: \"white\"}}>*/\r\n}\r\n{/*        <FormatListNumberedOutlinedIcon/>*/\r\n}\r\n{/*    </IconButton>*/\r\n}\r\n{/*</Tooltip>*/\r\n}\r\n","export const APP_HEADER = 'Random Cards'\r\n","import Typography from \"@material-ui/core/Typography\"\r\nimport React from \"react\"\r\n\r\nconst ErrorPage = ({error}) => {\r\n    return <Typography variant={'h1'}>\r\n        {error}\r\n    </Typography>\r\n}\r\n\r\nexport default ErrorPage\r\n","import Container from \"@material-ui/core/Container\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport React from \"react\"\r\n// import Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nexport const Main = () => (\r\n\r\n    <>\r\n        {/*<CssBaseline/>*/}\r\n        <Container maxWidth=\"lg\">\r\n            <div>\r\n                <h1>Random cards</h1>\r\n                <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A ab, amet aperiam doloremque ducimus\r\n                    eaque,\r\n                    enim, et facilis neque optio provident quam quas quod rem repellat rerum sequi sit suscipit.\r\n                </div>\r\n                <div>Accusamus alias architecto, aut cupiditate doloremque eveniet fugiat impedit in molestias nihil\r\n                    odio\r\n                    officiis porro, quo reiciendis rem tempora voluptates. Autem cum, error esse facere modi officiis\r\n                    quibusdam\r\n                    quisquam unde.\r\n                </div>\r\n                <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto beatae corporis culpa eum\r\n                    excepturi\r\n                    explicabo impedit iure minima minus molestiae nulla odit possimus quas, rem saepe soluta suscipit\r\n                    temporibus\r\n                    voluptas?\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    </>\r\n\r\n)\r\n","import CircularProgress from \"@material-ui/core/CircularProgress\"\r\nimport Container from '@material-ui/core/Container'\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport React from 'react'\r\nimport {Typography} from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '97vh',\r\n        // backgroundColor: '#a664ff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    spinner: {\r\n        marginBottom: '30px'\r\n    }\r\n}))\r\n\r\nconst Spinner = () => {\r\n    const styles = useStyles()\r\n\r\n    return (\r\n        <Container className={styles.root}>\r\n            <CircularProgress size={100} className={styles.spinner} />\r\n            <Typography variant={'h6'}>Songs is loading...</Typography>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport { ListType } from '../../constants/types';\r\nimport Spinner from \"../Spinner/Spinner\"\r\n\r\nexport function SongList(props: any): any {\r\n\r\n    if (props.isLoading) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    // return <>\r\n    //     <h1>My lists</h1>\r\n    //     <ListGroup>\r\n    //         {props.lists.map((list: ListType) =>\r\n    //             <ListGroup.Item action key={list._id}>\r\n    //                 {list.name}\r\n    //             </ListGroup.Item>\r\n    //         )}\r\n    //     </ListGroup>\r\n    // </>\r\n}\r\n\r\n\r\nexport default SongList\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport List from \"./List\";\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        lists: state.lists,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(List)\r\n","import React, {Fragment} from \"react\";\r\nimport { useAuth0 } from \"../Auth0/react-auth0-spa\"\r\n\r\nconst Profile = () => {\r\n    const { loading, user } = useAuth0();\r\n\r\n    if (loading || !user) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <img src={user.picture} alt=\"Profile\" />\r\n\r\n            <h2>{user.name}</h2>\r\n            <p>{user.email}</p>\r\n            <code>{JSON.stringify(user, null, 2)}</code>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import * as React from 'react'\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik'\r\nimport {Button, LinearProgress} from '@material-ui/core'\r\nimport {TextField} from 'formik-material-ui'\r\nimport {CheckboxWithLabel} from 'formik-material-ui';\r\nimport {connect} from 'react-redux'\r\nimport {addSongThunk} from '../../redux/thunks'\r\nimport history from '../../common/history';\r\n\r\nconst NewSongForm = (props) => (\r\n\r\n    <Formik\r\n        initialValues={{\r\n            name: '',\r\n            content: '',\r\n            favor: false\r\n        }}\r\n        validate={(values) => {\r\n            console.log('validate')\r\n            const errors = {}\r\n            if (!values.name) {\r\n                errors.name = 'Enter song name'\r\n            }\r\n            if (!values.content) {\r\n                errors.text = 'Enter song text'\r\n            }\r\n            return errors\r\n        }}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            props.addSongThunk(history, values.name, values.content, false)\r\n            setSubmitting(false)\r\n                // console.log(JSON.stringify(values, null, 2))\r\n        }}>\r\n        {({submitForm, isSubmitting, errors, touched, handleBlur, values, handleChange}) => (\r\n            <Form>\r\n                <Field\r\n                    component={TextField}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"name\"\r\n                    label=\"Song name\"\r\n                    name=\"name\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    value={values.name}\r\n                />\r\n\r\n                <ErrorMessage name=\"name\"/>\r\n\r\n                <Field\r\n                    component={CheckboxWithLabel}\r\n                    name=\"favor\"\r\n                    type={'checkbox'}\r\n                    Label={{label: 'Add to favor?'}}\r\n                />;\r\n\r\n                <Field\r\n                    component={TextField}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    fullWidth\r\n                    rows={window.innerHeight / 50}\r\n                    id=\"content\"\r\n                    label=\"Song text\"\r\n                    name=\"content\"\r\n                    multiline\r\n                    onChange={handleChange}\r\n                />\r\n                {touched.text && errors.text\r\n                    ? <div>{errors.text}</div>\r\n                    : null}\r\n                <br/>\r\n\r\n\r\n                {isSubmitting && <LinearProgress/>}\r\n\r\n                <br/>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={isSubmitting}\r\n                    onClick={submitForm}>\r\n                    Save\r\n                </Button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nexport default connect(null, {addSongThunk})(NewSongForm)\r\n","import {Box, IconButton} from '@material-ui/core'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport LoopIcon from '@material-ui/icons/Loop'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn'\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            flexWrap: 'nowrap'\r\n\r\n        },\r\n        fab: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(5),\r\n            right: theme.spacing(5),\r\n        },\r\n        floatButtonBlock: {\r\n            color: 'black',\r\n            position: 'absolute',\r\n            right: '10px',\r\n            top: '100px',\r\n            zIndex: 100,\r\n            '& Button': {\r\n                display: 'block'\r\n            }\r\n        },\r\n\r\n    }),\r\n);\r\n\r\nexport const FloatButtonBlock = (props) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Box className={classes.floatButtonBlock}>\r\n            <IconButton onClick={(ev) => props.shuffle(ev)}>\r\n                <LoopIcon/>\r\n            </IconButton>\r\n            <IconButton onClick={(e) => props.changefontSize(e, 1)}>\r\n                <ZoomInIcon/>\r\n            </IconButton>\r\n            <IconButton onClick={(e) => props.changefontSize(e, -1)}>\r\n                <ZoomOutIcon/>\r\n            </IconButton>\r\n            <IconButton>\r\n                {!props.editMode\r\n                    ? <EditIcon onClick={props.toogleEditMode}/>\r\n                    : <SaveIcon onClick={props.toogleEditMode}/>\r\n                }\r\n            </IconButton>\r\n\r\n        </Box>\r\n    )\r\n}\r\n","import {Container, IconButton, Typography} from '@material-ui/core'\r\nimport Button from '@material-ui/core/Button'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'\r\nimport {bindTrigger} from 'material-ui-popup-state'\r\nimport {bindPopper, bindToggle, usePopupState, anchorRef} from 'material-ui-popup-state/hooks'\r\nimport React, {useEffect, useRef, useState} from 'react'\r\nimport {useParams} from 'react-router'\r\nimport history from '../../common/history'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\n\r\nconst usePrevious = value => {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        border: '1px solid',\r\n        top: '20px',\r\n        left: '20px',\r\n        padding: theme.spacing(1),\r\n        backgroundColor: theme.palette.background.paper\r\n    },\r\n    typography: {\r\n        padding: theme.spacing(1),\r\n        opacity: 0.5\r\n    }\r\n}))\r\n\r\nconst SongTitle = (props) => {\r\n\r\n    const {id} = useParams()\r\n\r\n    const styles = useStyles()\r\n    const popupState = usePopupState({variant: 'popper', popupId: 'favorPopper'})\r\n    const favorIconRef = useRef()\r\n    const prevFavor = usePrevious(props.currentSongData.favor)\r\n    const prevId = usePrevious(id)\r\n\r\n\r\n    popupState.setAnchorEl(favorIconRef.current)\r\n\r\n    useEffect(() => {\r\n\r\n        console.log('prevId', prevId, 'id', id)\r\n\r\n        // (this.props.match.params.userId != prevProps.match.params.userId)\r\n        // if (prevFavor !== undefined) {\r\n        if ((id === prevId) && (prevFavor !== undefined)) {\r\n            popupState.open()\r\n            setTimeout(() => {\r\n                popupState.close()\r\n            }, 2000)\r\n        }\r\n\r\n    }, [props.currentSongData.favor])\r\n\r\n\r\n    const deleteSongHandler = () => {\r\n        const isDelete = window.confirm('Delete this song?')\r\n        if (isDelete) {\r\n            props.deleteSongThunk(props.currentSongData._id, history)\r\n        }\r\n    }\r\n\r\n\r\n    return <Container>\r\n\r\n        <Typography variant={'h6'} noWrap>\r\n            {props.currentSongData.name + (props.editMode ? ' (редактирование)' : '')}\r\n        </Typography>\r\n        <Typography variant={'caption'}>\r\n            {`last seen: ${new Date(props.currentSongData.time_last_seen).toLocaleDateString()}`}\r\n        </Typography>\r\n\r\n        <Popper anchorEl={favorIconRef} {...bindPopper(popupState)}>\r\n            <Paper>\r\n                <Typography className={styles.typography}>\r\n                    {props.currentSongData.favor\r\n                        ? 'Song add to favor'\r\n                        : 'Song deleted from favor'}\r\n                </Typography>\r\n            </Paper>\r\n        </Popper>\r\n\r\n        <IconButton\r\n            ref={favorIconRef}\r\n            onClick={() => props.toogleFavorThunk(props.currentSongData._id, props.currentSongData.favor)}>\r\n            {props.currentSongData.favor\r\n                ? <FavoriteIcon/>\r\n                : <FavoriteBorderIcon/>}\r\n\r\n        </IconButton>\r\n\r\n        <IconButton onClick={deleteSongHandler}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n\r\n        <IconButton\r\n            onClick={() => props.toogleHideThunk(props.currentSongData._id, props.currentSongData.hide)}>\r\n            {props.currentSongData.hide\r\n                ? <VisibilityOffIcon />\r\n                : <VisibilityIcon />}\r\n        </IconButton>\r\n\r\n    </Container>\r\n}\r\n\r\nexport default SongTitle\r\n","import React from 'react'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport {br2nl, nl2br} from '../../common/nl2br'\r\nimport Spinner from '../Spinner/Spinner';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Paper} from \"@material-ui/core\"\r\nimport {FloatButtonBlock} from './SongButtons';\r\nimport SongTitle from './SongTitle';\r\n\r\n\r\nexport type SongPropsType = {\r\n    getSongByRandomThunk: (history: any) => void\r\n    history: any\r\n    currentSongData: any\r\n    isLoading: boolean\r\n    fontSize: number\r\n    editMode: boolean\r\n    setFontSize: (size: number) => void\r\n    toogleFavorThunk: (id: number, favor: boolean) => void\r\n    toogleHideThunk: (id: number, hide: boolean) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    setSongContentThunk: (id: number, sanitizedHtml: string) => void\r\n    deleteSongThunk: (id: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            flexWrap: 'nowrap'\r\n\r\n        },\r\n        fab: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(5),\r\n            right: theme.spacing(5),\r\n        },\r\n        floatButtonBlock: {\r\n            color: 'black',\r\n            position: 'absolute',\r\n            right: '10px',\r\n            top: '100px',\r\n            zIndex: 100,\r\n            '& Button': {\r\n                display: 'block'\r\n            }\r\n        },\r\n        editable: {\r\n            fontSize: (props: SongPropsType) => props.fontSize,\r\n            padding: 10,\r\n            fontFace: 'Roboto',\r\n            // height: '100%'\r\n        }\r\n\r\n\r\n    }),\r\n);\r\n\r\n\r\nconst Song: React.FunctionComponent<SongPropsType> = (props: SongPropsType) => {\r\n\r\n    const classes = useStyles(props);\r\n    const contentEditable: React.RefObject<HTMLInputElement> = React.createRef();\r\n\r\n    if (props.isLoading || !props.currentSongData) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    const songContent = nl2br(props.currentSongData.content)\r\n\r\n    const shuffle = (e: any) => {\r\n        e.preventDefault()\r\n        if (props.editMode) {\r\n            props.setEditMode(false)\r\n        }\r\n        props.getSongByRandomThunk(props.history)\r\n    }\r\n\r\n    const changefontSize = (e: any, inc: number) => {\r\n        props.setFontSize(props.fontSize + inc)\r\n    }\r\n\r\n    const toogleEditMode = () => {\r\n        props.setEditMode(!props.editMode)\r\n        if (props.editMode && contentEditable.current) {\r\n            props.setSongContentThunk(props.currentSongData._id, br2nl(contentEditable.current.innerText))\r\n            props.setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FloatButtonBlock\r\n                shuffle={shuffle}\r\n                changefontSize={changefontSize}\r\n                toogleEditMode={toogleEditMode}\r\n                editMode={props.editMode}/>\r\n\r\n            <SongTitle\r\n                currentSongData={props.currentSongData}\r\n                editMode={props.editMode}\r\n                toogleFavorThunk={props.toogleFavorThunk}\r\n                toogleHideThunk={props.toogleHideThunk}\r\n                deleteSongThunk={props.deleteSongThunk}\r\n            />\r\n\r\n            <Paper elevation={3}>\r\n                <ContentEditable\r\n                    html={songContent}\r\n                    innerRef={contentEditable}\r\n                    disabled={!props.editMode}\r\n                    spellCheck={'false'}\r\n                    onChange={() => null}\r\n                    className={classes.editable}\r\n                />\r\n            </Paper>\r\n\r\n        </>)\r\n\r\n}\r\n\r\nexport default Song\r\n","export const nl2br = (str, isXhtml) => {\r\n    // Some latest browsers when str is null return and unexpected null value\r\n    if (typeof str === 'undefined' || str === null) {\r\n        return ''\r\n    }\r\n\r\n    // Adjust comment to avoid issue on locutus.io display\r\n    const breakTag = (isXhtml || typeof isXhtml === 'undefined') ? '<br ' + '/>' : '<br>'\r\n\r\n    return (str + '')\r\n        .replace(/(\\r\\n|\\n\\r|\\r|\\n)/g, breakTag + '$1')\r\n}\r\n\r\n/**\r\n * This function inverses text from PHP's nl2br() with default parameters.\r\n *\r\n * @param {string} str Input text\r\n * @param {boolean} replaceMode Use replace instead of insert\r\n * @return {string} Filtered text\r\n */\r\nexport function br2nl (str, replaceMode = true) {\r\n\r\n    if (typeof str === 'undefined' || str === null) {\r\n        return ''\r\n    }\r\n    const replaceStr = (replaceMode) ? \"\\n\" : '';\r\n    // Includes <br>, <BR>, <br />, </br>\r\n    // eslint-disable-next-line no-useless-escape\r\n    return str.replace(/<\\s*\\/?br\\s*[\\/]?>/gi, replaceStr);\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps} from 'react-router-dom'\r\nimport {setEditMode, setFontSize, setLastSongIndex} from '../../redux/song-reducer'\r\nimport {\r\n    deleteSongThunk,\r\n    getSongByIdThunk,\r\n    getSongByRandomThunk,\r\n    setSongContentThunk,\r\n    toogleFavorThunk,\r\n    toogleHideThunk\r\n} from '../../redux/thunks'\r\nimport Song, {SongPropsType} from './Song'\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n    index: string\r\n}\r\n\r\ntype OwnPropsTypes = {\r\n    getSongByIdThunk: (id: string, index: string) => void\r\n}\r\n\r\ntype SongContainerPropsType = RouteComponentProps<PathParamsType> & SongPropsType & OwnPropsTypes\r\n\r\nclass SongContainer extends React.Component<SongContainerPropsType> {\r\n\r\n    componentDidUpdate(prevProps: SongContainerPropsType) {\r\n        if (this.props.match.params.id !== prevProps.match.params.id) {\r\n            this.props.getSongByIdThunk(this.props.match.params.id, this.props.match.params.index)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getSongByIdThunk(this.props.match.params.id, this.props.match.params.index)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Song\r\n                    history={this.props.history}\r\n                    currentSongData={this.props.currentSongData}\r\n                    toogleFavorThunk={this.props.toogleFavorThunk}\r\n                    toogleHideThunk={this.props.toogleHideThunk}\r\n                    getSongByRandomThunk={this.props.getSongByRandomThunk}\r\n                    fontSize={this.props.fontSize}\r\n                    setFontSize={this.props.setFontSize}\r\n                    editMode={this.props.editMode}\r\n                    setEditMode={this.props.setEditMode}\r\n                    setSongContentThunk={this.props.setSongContentThunk}\r\n                    isLoading={this.props.isLoading}\r\n                    deleteSongThunk={this.props.deleteSongThunk}\r\n                />\r\n            </div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        currentSongData: state.songReducer.currentSongData,\r\n        isLoading: state.songReducer.isLoading,\r\n        fontSize: state.songReducer.fontSize,\r\n        editMode: state.songReducer.editMode\r\n    }\r\n}\r\n\r\nexport default connect<ReturnType<typeof mapStateToProps>>(mapStateToProps, {\r\n    getSongByIdThunk,\r\n    getSongByRandomThunk,\r\n    toogleFavorThunk,\r\n    setEditMode,\r\n    toogleHideThunk,\r\n    setSongContentThunk,\r\n    setFontSize,\r\n    setLastSongIndex,\r\n    deleteSongThunk\r\n})(SongContainer)\r\n\r\n","import Button from '@material-ui/core/Button'\r\nimport Container from \"@material-ui/core/Container\"\r\nimport Fab from '@material-ui/core/Fab'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport React from \"react\"\r\nimport {Link, NavLink} from \"react-router-dom\"\r\nimport Spinner from \"../Spinner/Spinner\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {FixedSizeList} from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport history from '../../common/history'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {},\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(5),\r\n        right: theme.spacing(4),\r\n    },\r\n    listContainer: {\r\n        // backgroundColor: 'red',\r\n        height: '85vh'\r\n    }\r\n}))\r\n\r\n\r\nconst VirtualizedListItem = ({index, style, data}) => {\r\n    // https://github.com/mui-org/material-ui/issues/16026\r\n\r\n    const song = data[index]\r\n\r\n    return <ListItem\r\n        key={index}\r\n        button\r\n        ContainerProps={{style: style}}\r\n        ContainerComponent=\"div\"\r\n    >\r\n        <ListItemIcon>\r\n            {song.favor\r\n                ? <FavoriteIcon/>\r\n                : <FavoriteBorderIcon/>}\r\n\r\n        </ListItemIcon>\r\n\r\n        <ListItemText component={Link} to={\"/card/\" + song._id}\r\n                      primary={song.name}\r\n                      onClick={() => history.push(\"/card/\" + song._id + '/' + index)}\r\n        />\r\n\r\n        <ListItemSecondaryAction onClick={()=>alert('!')}>\r\n            <IconButton edge=\"end\" aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItemSecondaryAction>\r\n\r\n    </ListItem>\r\n}\r\n\r\nconst WindowsList = (props) => {\r\n\r\n    const listRef = React.createRef();\r\n\r\n    const offset = () =>{\r\n        alert(props.lastSongIndex)\r\n        listRef.current.scrollToItem(parseInt(props.lastSongIndex), \"start\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*//<Button variant=\"contained\" onClick={offset}>Default</Button>*/}\r\n            <AutoSizer>\r\n                {({height, width}) => {\r\n                    return (\r\n                        <FixedSizeList\r\n                            ref={listRef}\r\n                            itemData={props.songs}\r\n                            itemCount={props.songs.length}\r\n                            overscanCount={20}\r\n                            height={height}\r\n                            width={width}\r\n                            itemSize={48}\r\n                            initialScrollOffset={parseInt(props.lastSongIndex)}\r\n                        >\r\n                            {VirtualizedListItem}\r\n                        </FixedSizeList>)\r\n                }}\r\n            </AutoSizer>\r\n        </>)\r\n\r\n}\r\n\r\n\r\nexport const SongList = ({songs, isLoading, lastSongIndex}) => {\r\n\r\n    const styles = useStyles()\r\n\r\n    if (isLoading) {\r\n        return <Spinner/>\r\n    }\r\n    return (\r\n\r\n        <Container className={styles.listContainer}>\r\n\r\n            <Typography variant={\"h4\"}>\r\n                All songs\r\n            </Typography>\r\n\r\n            {/*<List>*/}\r\n            {/*    {songs.map(item => <SongListItem song={item} key={item._id}/>)}*/}\r\n            {/*</List>*/}\r\n\r\n            <WindowsList songs={songs}\r\n                         lastSongIndex={lastSongIndex}/>\r\n\r\n            <Fab component={NavLink} to={'/new'} className={styles.fab} color=\"primary\" aria-label=\"add\">\r\n                <AddIcon/>\r\n            </Fab>\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\n//\r\n// const SongListItem = ({song}) => {\r\n//\r\n//     return <ListItem\r\n//         button\r\n//     >\r\n//         <ListItemIcon>\r\n//             {song.favor\r\n//                 ? <FavoriteIcon/>\r\n//                 : <FavoriteBorderIcon/>}\r\n//\r\n//         </ListItemIcon>\r\n//\r\n//         <ListItemText button\r\n//                       component={Link}\r\n//                       to={\"/card/\" + song._id}\r\n//                       primary={song.name}\r\n//         />\r\n//\r\n//         {/*<ListItemSecondaryAction button onClick={()=>alert('111')}>*/}\r\n//         {/*    <IconButton edge=\"end\" aria-label=\"delete\" onClick={()=>alert('111')}>*/}\r\n//         {/*        <DeleteIcon onClick={()=>alert('111')}/>*/}\r\n//         {/*    </IconButton>*/}\r\n//         {/*</ListItemSecondaryAction>*/}\r\n//     </ListItem>\r\n//\r\n// }\r\n\r\n\r\nexport default SongList\r\n\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {setTerm} from '../../redux/song-reducer'\r\nimport {getSongsListThunk, toogleFavorThunk, deleteSongThunk} from '../../redux/thunks'\r\nimport SongList from \"./SongList\";\r\nimport {createSelector} from 'reselect'\r\nimport {SongType} from \"../../constants/types\"\r\n\r\nconst getSongs = (state: any) => state.songReducer.songs\r\nconst getTerm = (state: any) => state.songReducer.term\r\nconst getOnlyFavor = (state: any) => state.songReducer.getOnlyFavor\r\nconst showHidden = (state: any) => state.songReducer.showHidden\r\n\r\nconst filtredSongsSelector = createSelector(\r\n    [getSongs, getTerm, getOnlyFavor],\r\n    (songs, term, getOnlyFavor) => {\r\n        // let filteredSongs = songs.filter((item: any) => item.name.includes(term))\r\n        let filteredSongs = songs.filter((item: SongType) => !item.hide)\r\n\r\n        if (getOnlyFavor) {\r\n            filteredSongs = songs.filter((item: any) => item.favor)\r\n        }\r\n\r\n        if (!showHidden) {\r\n            filteredSongs = songs.filter((item: SongType) => !item.hide)\r\n        }\r\n\r\n        const cyrillic = (a: any) => 10 > a ? 2e4 + +a : a.charCodeAt(0);\r\n        filteredSongs = filteredSongs.sort((a: any, b: any) => cyrillic(a.name) - cyrillic(b.name))\r\n        return filteredSongs.sort((a: SongType, b: SongType) => 0.5 - Math.random())\r\n    }\r\n)\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        songs: filtredSongsSelector(state),\r\n        term: getTerm(state),\r\n        isLoading: state.songReducer.isLoading,\r\n        getOnlyFavor: state.songReducer.getOnlyFavor,\r\n        lastSongIndex: state.songReducer.lastSongIndex\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getSongsListThunk, setTerm, toogleFavorThunk, deleteSongThunk})(SongList)\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport appReducer from './app-reducer'\r\nimport reducer from './song-reducer'\r\nimport {createLogger} from 'redux-logger'\r\n//\r\nconst logger = createLogger({\r\n    // collapsed: () => (true),\r\n    // predicate: (getState, action) => !action.type.includes('@@redux-form'),\r\n    level: 'log',\r\n});\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger]\r\n\r\nconst store = configureStore(\r\n    {\r\n        reducer: {\r\n            songReducer: reducer,\r\n            app: appReducer\r\n        },\r\n        middleware\r\n    }\r\n)\r\n\r\n\r\nexport default store\r\n","import {createSlice} from \"@reduxjs/toolkit\"\r\n\r\nconst initialState = {\r\n    userInfo: {}\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n//\r\n//\r\nconst authSlice = createSlice({\r\n        name: 'auth',\r\n        initialState,\r\n        reducers: {\r\n            setUserInfo: (state: initialStateType, action) => {\r\n                state.userInfo = action.payload\r\n            }\r\n        }\r\n    }\r\n)\r\n//\r\nconst {actions, reducer} = authSlice\r\nexport const {setUserInfo} = actions\r\n//\r\nexport default authSlice\r\n","import CssBaseline from \"@material-ui/core/CssBaseline\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport React from \"react\"\nimport {connect, Provider} from \"react-redux\"\nimport {Route, Router, Switch} from \"react-router-dom\"\nimport {compose} from \"redux\"\nimport history from './common/history';\nimport SearchAppBar from \"./components/AppBar/SearchAppBar\"\nimport ErrorPage from \"./components/ErrorPage/ErrorPage\"\nimport {Main} from \"./components/Info/Main\"\nimport ListContainer from \"./components/List/ListContainer\"\nimport Profile from './components/Profile/Profile'\nimport NewSongForm from './components/Song/NewSongForm'\nimport SongContainer from \"./components/Song/SongContainer\"\nimport SongsListContainer from \"./components/SongList/SongsListContainer\"\nimport {initializeApp} from \"./redux/app-reducer\"\nimport store from \"./redux/store\"\nimport {Auth0Provider} from './components/Auth0/react-auth0-spa'\nimport config from \"./components/Auth0/auth_config\";\nimport {setUserInfo} from './redux/auth-reducer'\n\n// type PropsType = {\n//     initialized: boolean\n//     initializeApp: () => void\n//     onSetSidebarOpen: () => void\n// }\n\n\n\n\nclass App extends React.Component {\n// class App extends React.Component<PropsType, StateType > {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n\n        if (this.props.error) {\n            return <ErrorPage error={this.props.error}/>\n        }\n\n        if (!this.props.initialized) {\n            return <LinearProgress/>\n        }\n\n        const routes = (\n            <Switch>\n                {/*<Route path='/sign/' exact render={() => <SignIn/>}/>*/}\n                {/*<Route path='/callback' exact render={() => <Callback/>}/>*/}\n                <Route path='/lists/' exact render={() => <ListContainer/>}/>\n                <Route path='/new/' exact render={() => <NewSongForm/>}/>\n                <Route path='/card/:id/:index(\\d+)?' component={SongContainer}/>\n                <Route path='/cards/' exact render={() => <SongsListContainer/>}/>\n                <Route path='/profile/' exact render={() => <Profile/>}/>\n                {/*<PrivateRoute path='/cards/' exact render={() => <SongsListContainer/>}/>*/}\n                <Route exact component={Main}/>\n            </Switch>\n        )\n\n        return (\n            <>\n                <CssBaseline/>\n                <SearchAppBar/>\n                {routes}\n\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        initialized: state.app.initialized,\n        error: state.app.error\n    }\n}\n\nconst AppContainer = compose(\n    // withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\n\nconst onRedirectCallback = appState => {\n    history.push(\n        appState && appState.targetUrl\n            ? appState.targetUrl\n            : window.location.pathname\n    );\n};\n\nconst RandomCardsApp = () => {\n    return <Auth0Provider\n        domain={config.domain}\n        client_id={config.clientId}\n        audience={config.audience}\n        redirect_uri={window.location.origin}\n        onRedirectCallback={onRedirectCallback}\n        cacheLocation={'localstorage'}\n    >\n        <Router history={history}>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </Router>\n    </Auth0Provider>\n\n}\nexport default RandomCardsApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomCardsApp from './App'\n\n\n\nimport history from \"./common/history\";\n\nimport * as serviceWorker from './serviceWorker';\n\n// const onRedirectCallback = appState => {\n//     history.push(\n//         appState && appState.targetUrl\n//             ? appState.targetUrl\n//             : window.location.pathname\n//     );\n// };\n\nReactDOM.render(\n    // <Auth0Provider\n    //     domain={config.domain}\n    //     client_id={config.clientId}\n    //     redirect_uri={window.location.origin}\n    //     onRedirectCallback={onRedirectCallback}\n    //     cacheLocation={'localstorage'}\n    // >\n        <RandomCardsApp/>,\n    // </Auth0Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}