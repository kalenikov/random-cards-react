{"version":3,"sources":["components/Context/PopperContext.js","components/ErrorPage/ErrorPage.js","components/Info/Main.js","components/Spinner/Spinner.tsx","components/List/List.tsx","components/List/ListContainer.tsx","redux/song-reducer.ts","api/api.js","redux/app-reducer.ts","redux/thunks.ts","components/Drawer/AppDrawer.js","components/AppBar/SearchAppBar.js","constants/constants.js","common/history.js","components/Song/NewSongForm.js","components/Song/SongButtons.js","components/Song/SongTitle.js","components/Song/Song.tsx","common/nl2br.js","components/Song/SongContainer.tsx","components/SongList/SongList.js","components/SongList/SongsListContainer.tsx","redux/store.ts","SignIn/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["createContext","ErrorPage","error","Typography","variant","Main","Container","maxWidth","useStyles","makeStyles","theme","root","height","display","flexDirection","alignItems","justifyContent","spinner","marginBottom","Spinner","styles","className","CircularProgress","size","SongList","props","isLoading","connect","state","lists","List","songsSlice","createSlice","name","initialState","songs","currentSongId","lastSongIndex","currentSongData","getOnlyFavor","term","fontSize","editMode","showHidden","reducers","setSongId","action","payload","setLastSongIndex","setSongData","toogleGetOnlyFavor","setSongsList","setTerm","setFontSize","setEditMode","setLoadingOn","setLoadingOff","toogleHide","hide","map","song","_id","toogleFavor","favor","actions","reducer","baseURL","instance","axios","headers","SongAPI","get","songId","post","content","delete","data","appSlice","initialized","popper","initializedSuccess","setError","getSongsListThunk","dispatch","getState","a","songReducer","response","console","toString","toogleFavorThunk","deleteSongThunk","history","filter","push","createStyles","list","width","drawer","breakpoints","up","flexShrink","AppDrawer","classes","Drawer","anchor","open","onClose","handleDrawerClose","paper","drawerPaper","role","ListItem","onClick","button","component","Link","to","ListItemIcon","ListItemText","primary","FormControlLabel","control","Switch","checked","onChange","color","label","Divider","flexGrow","menuButton","marginRight","spacing","title","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","searchIcon","padding","pointerEvents","inputRoot","inputInput","paddingLeft","transition","transitions","create","toogleGetOnlyFavorUpdateList","React","useState","setOpen","AppBar","Toolbar","IconButton","edge","aria-label","noWrap","Button","RouterLink","style","InputBase","value","ev","currentTarget","placeholder","input","inputProps","createBrowserHistory","addSongThunk","responce","initialValues","validate","values","log","errors","text","onSubmit","setSubmitting","submitForm","isSubmitting","touched","handleBlur","handleChange","TextField","margin","required","fullWidth","id","onBlur","CheckboxWithLabel","type","Label","rows","window","innerHeight","multiline","LinearProgress","disabled","flexWrap","fab","bottom","right","floatButtonBlock","top","zIndex","FloatButtonBlock","Box","shuffle","e","changefontSize","toogleEditMode","usePrevious","ref","useRef","useEffect","current","border","left","background","typography","opacity","SongTitle","useParams","popupState","usePopupState","popupId","favorIconRef","prevFavor","prevId","setAnchorEl","undefined","setTimeout","close","Date","time_last_seen","toLocaleDateString","Popper","anchorEl","bindPopper","Paper","confirm","toogleHideThunk","editable","fontFace","Song","contentEditable","createRef","str","isXhtml","songContent","replace","preventDefault","getSongByRandomThunk","inc","setSongContentThunk","replaceMode","replaceStr","br2nl","innerText","elevation","html","innerRef","spellCheck","SongContainer","prevProps","this","match","params","getSongByIdThunk","index","Component","length","item","Math","floor","random","status","listContainer","VirtualizedListItem","key","ContainerProps","ContainerComponent","ListItemSecondaryAction","alert","WindowsList","listRef","itemData","itemCount","overscanCount","itemSize","initialScrollOffset","parseInt","Fab","NavLink","getTerm","filtredSongsSelector","createSelector","filteredSongs","cyrillic","charCodeAt","sort","b","logger","createLogger","level","middleware","getDefaultMiddleware","store","configureStore","app","appReducer","Copyright","align","href","getFullYear","marginTop","avatar","secondary","main","form","submit","SignIn","CssBaseline","Avatar","noValidate","autoComplete","autoFocus","Checkbox","Grid","container","xs","mt","App","initializeApp","routes","path","exact","render","SongsListContainer","ListContainer","AppContainer","compose","RandomCardsApp","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5f656c57.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nexport const PopperContext = createContext('')\r\n","import Typography from \"@material-ui/core/Typography\"\r\nimport React from \"react\"\r\n\r\nconst ErrorPage = ({error}) => {\r\n    return <Typography variant={'h1'}>\r\n        {error}\r\n    </Typography>\r\n}\r\n\r\nexport default ErrorPage\r\n","import Container from \"@material-ui/core/Container\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport React from \"react\"\r\n// import Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nexport const Main = () => (\r\n\r\n    <>\r\n        {/*<CssBaseline/>*/}\r\n        <Container maxWidth=\"lg\">\r\n            <div>\r\n                <h1>Random cards</h1>\r\n                <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A ab, amet aperiam doloremque ducimus\r\n                    eaque,\r\n                    enim, et facilis neque optio provident quam quas quod rem repellat rerum sequi sit suscipit.\r\n                </div>\r\n                <div>Accusamus alias architecto, aut cupiditate doloremque eveniet fugiat impedit in molestias nihil\r\n                    odio\r\n                    officiis porro, quo reiciendis rem tempora voluptates. Autem cum, error esse facere modi officiis\r\n                    quibusdam\r\n                    quisquam unde.\r\n                </div>\r\n                <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto beatae corporis culpa eum\r\n                    excepturi\r\n                    explicabo impedit iure minima minus molestiae nulla odit possimus quas, rem saepe soluta suscipit\r\n                    temporibus\r\n                    voluptas?\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    </>\r\n\r\n)\r\n","import CircularProgress from \"@material-ui/core/CircularProgress\"\r\nimport Container from '@material-ui/core/Container'\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport React from 'react'\r\nimport {Typography} from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: '97vh',\r\n        // backgroundColor: '#a664ff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    spinner: {\r\n        marginBottom: '30px'\r\n    }\r\n}))\r\n\r\nconst Spinner = () => {\r\n    const styles = useStyles()\r\n\r\n    return (\r\n        <Container className={styles.root}>\r\n            <CircularProgress size={100} className={styles.spinner} />\r\n            <Typography variant={'h6'}>Songs is loading...</Typography>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport { ListType } from '../../constants/types';\r\nimport Spinner from \"../Spinner/Spinner\"\r\n\r\nexport function SongList(props: any): any {\r\n\r\n    if (props.isLoading) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    // return <>\r\n    //     <h1>My lists</h1>\r\n    //     <ListGroup>\r\n    //         {props.lists.map((list: ListType) =>\r\n    //             <ListGroup.Item action key={list._id}>\r\n    //                 {list.name}\r\n    //             </ListGroup.Item>\r\n    //         )}\r\n    //     </ListGroup>\r\n    // </>\r\n}\r\n\r\n\r\nexport default SongList\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport List from \"./List\";\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        lists: state.lists,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(List)\r\n","import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    songs: [] as Array<SongType>,\r\n    currentSongId: null,\r\n    lastSongIndex: 0,\r\n    currentSongData: {} as SongType,\r\n    isLoading: false,\r\n    getOnlyFavor: false,\r\n    term: '',\r\n    fontSize: 14,\r\n    editMode: false,\r\n    showHidden: false,\r\n}\r\ntype SongType = {\r\n    _id: string\r\n    name: string\r\n    favor: boolean\r\n    hide: boolean\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst songsSlice = createSlice({\r\n        name: 'songs',\r\n        initialState,\r\n        reducers: {\r\n            setSongId: (state, action) => {\r\n                state.currentSongId = action.payload\r\n            },\r\n            setLastSongIndex: (state, action) => {\r\n                state.lastSongIndex = action.payload\r\n            },\r\n            setSongData: (state, action) => {\r\n                state.currentSongData = action.payload\r\n            },\r\n            toogleGetOnlyFavor: (state) => {\r\n                state.getOnlyFavor = !state.getOnlyFavor\r\n            },\r\n            setSongsList: (state, action) => {\r\n                state.songs = action.payload\r\n            },\r\n            setTerm: (state, action) => {\r\n                state.term = action.payload\r\n            },\r\n            setFontSize: (state, action) => {\r\n                state.fontSize = action.payload\r\n            },\r\n            setEditMode: (state, action) => {\r\n                state.editMode = action.payload\r\n            },\r\n            setLoadingOn: (state) => {\r\n                state.isLoading = true\r\n            },\r\n            setLoadingOff: (state) => {\r\n                state.isLoading = false\r\n            },\r\n            toogleHide: (state, action) => {\r\n                if (state.currentSongData) {\r\n                    state.currentSongData.hide = !state.currentSongData.hide\r\n                }\r\n                state.songs.map((song: SongType) => {\r\n                    if (song._id === action.payload) {\r\n                        song.hide = !song.hide\r\n                    }\r\n                    return song\r\n                })\r\n            },\r\n            toogleFavor: (state, action) => {\r\n                if (state.currentSongData) {\r\n                    state.currentSongData.favor = !state.currentSongData.favor\r\n                }\r\n                state.songs.map((song: SongType) => {\r\n                    if (song._id === action.payload) {\r\n                        song.favor = !song.favor\r\n                    }\r\n                    return song\r\n                })\r\n            },\r\n        }\r\n    }\r\n)\r\n\r\nconst {actions, reducer} = songsSlice\r\n\r\nexport const {\r\n    setSongId,\r\n    setSongData,\r\n    toogleGetOnlyFavor,\r\n    setSongsList,\r\n    setTerm,\r\n    toogleFavor,\r\n    setLoadingOff,\r\n    setLoadingOn,\r\n    setEditMode,\r\n    setFontSize,\r\n    toogleHide,\r\n    setLastSongIndex\r\n} = actions\r\n\r\nexport default reducer\r\n","import * as axios from 'axios'\n\nlet baseURL = ''\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    baseURL = 'http://localhost:5000/api/v1/'\n    // baseURL = 'https://random-cards-server.herokuapp.com/api/v1/'\n} else {\n    // baseURL = 'http://37.228.117.161:5000/api/v1/'\n    // baseURL = 'http://192.168.0.100:5000/api/v1/'\n    baseURL = 'http://localhost:5000/api/v1/'\n    // baseURL = 'https://random-cards-server.herokuapp.com/api/v1/'\n}\n\nconst instance = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n    },\n})\n\nexport const SongAPI = {\n\n    getSongsList(getOnlyFavor) {\n        return instance.get('/cards?limit=999' + (getOnlyFavor ? '&favor=true' : ''))\n        // return instance.get('/cards', {favor: false, name: ''})\n    },\n    getSong(songId) {\n        return instance.get('/cards?id=' + songId)\n    },\n    getSongRandom() {\n        return instance.get('/cards?random=true&limit=1')\n    },\n    setFavor(songId, favor) {\n        const result = instance.post('/cards', {_id: songId, favor: favor})\n        return result\n    },\n    setHide(songId, hide) {\n        const result = instance.post('/cards', {_id: songId, hide: hide})\n        return result\n    },\n    setContent(songId, content) {\n        return instance.post('/cards', {_id: songId, content: content})\n    },\n    addSong(name, content, favor) {\n        return instance.post('/cards/add', {name: name, content: content, favor: favor})\n    },\n    deleteSong(songId) {\n        return instance.delete('/cards', {data: {_id: songId}})\n    }\n}\n\n","import {createSlice} from '@reduxjs/toolkit'\r\nimport {getSongsListThunk} from './thunks'\r\nimport {Dispatch} from \"redux\"\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n    error: '',\r\n    popper: ''\r\n};\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        initializedSuccess: (state) => {\r\n            state.initialized = true\r\n        },\r\n        setError: (state, action)=>{\r\n            state.error = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nconst {actions, reducer} = appSlice\r\nexport const {initializedSuccess, setError} = actions\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getSongsListThunk());\r\n    dispatch(initializedSuccess());\r\n}\r\n\r\n\r\nexport default reducer;\r\n","import {SongAPI} from '../api/api'\r\nimport {setLoadingOff, setLoadingOn, setSongData, setSongId, setSongsList, toogleFavor, toogleGetOnlyFavor, toogleHide, setLastSongIndex} from './song-reducer'\r\nimport {setError} from './app-reducer'\r\nimport {SongType} from \"../constants/types\"\r\n\r\nexport const getSongsListThunk = () => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const getOnlyFavor = getState().songReducer.getOnlyFavor\r\n    try {\r\n        const response = await SongAPI.getSongsList(getOnlyFavor)\r\n        dispatch(setSongsList(response.data))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(setError(e.toString()))\r\n    }\r\n\r\n    dispatch(setLoadingOff())\r\n\r\n}\r\n\r\nexport const getSongByIdThunk = (songId: number, index: number) => async (dispatch: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.getSong(songId)\r\n    if (response.data.length === 1) {\r\n        dispatch(setLoadingOff())\r\n        dispatch(setSongData(response.data[0]))\r\n        dispatch(setLastSongIndex(index))\r\n    }\r\n}\r\n\r\nexport const getSongByRandomThunk = (history: any) => (dispatch: any, getState: any) => {\r\n    const state = getState().songReducer\r\n    let songs = state.songs\r\n    if (state.getOnlyFavor) {\r\n        songs = state.songs.filter((item: SongType) => item.favor)\r\n    }\r\n    const song = songs[Math.floor(Math.random() * songs.length)];\r\n    dispatch(setSongId(song._id))\r\n    history.push('/card/' + song._id)\r\n}\r\n\r\nexport const toogleFavorThunk = (songId: number, favor: boolean) => async (dispatch: any) => {\r\n    await SongAPI.setFavor(songId, !favor)\r\n    dispatch(toogleFavor(songId))\r\n}\r\n\r\nexport const setSongContentThunk = (songId: number, content: string) => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.setContent(songId, content)\r\n    if (response.status === 202) {\r\n        dispatch(setLoadingOff())\r\n        dispatch(setSongData({...getState().songReducer.currentSongData, content: content}))\r\n    }\r\n}\r\nexport const toogleGetOnlyFavorUpdateList = (songId: number, favor: boolean) => (dispatch: any, getState: any) => {\r\n    dispatch(toogleGetOnlyFavor())\r\n    if (getState().songReducer.getOnlyFavor){\r\n        dispatch(setSongsList(getState().songReducer.songs.filter((song: SongType) => song.favor)))\r\n    }\r\n}\r\n\r\nexport const toogleHideThunk = (songId: string, hide: boolean) => async (dispatch: any, getState: any) => {\r\n    await SongAPI.setHide(songId, !hide)\r\n    dispatch(toogleHide(songId))\r\n    dispatch(setSongsList(getState().songReducer.songs.filter((song: SongType) => song._id != songId)))\r\n}\r\n\r\nexport const addSongThunk = (history: any, name: string, content: string, favor: boolean) => async (dispatch: any) => {\r\n    dispatch(setLoadingOn())\r\n    const responce = await SongAPI.addSong(name, content, favor)\r\n    history.push('/card/' + responce.data)\r\n    dispatch(setLoadingOff())\r\n}\r\n\r\nexport const deleteSongThunk = (songId: number, history: any) => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.deleteSong(songId)\r\n    const songs = getState().songReducer.songs\r\n    dispatch(setSongsList(songs.filter((song: any) => song._id != songId)))\r\n    dispatch(setLoadingOff())\r\n    history.push('/cards')\r\n}\r\n\r\n","import Avatar from \"@material-ui/core/Avatar\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport Drawer from \"@material-ui/core/Drawer\"\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport List from \"@material-ui/core/List\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\r\nimport Switch from '@material-ui/core/Switch'\r\nimport React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst useStyles = makeStyles(theme =>\r\n    createStyles({\r\n        list: {\r\n            width: 250,\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                width: 240,\r\n                flexShrink: 0,\r\n            },\r\n        },\r\n    }))\r\n\r\nconst AppDrawer = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"temporary\"\r\n            anchor=\"left\"\r\n            open={props.open}\r\n            onClose={props.handleDrawerClose}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <div\r\n                className={classes.list}\r\n                role=\"presentation\"\r\n            >\r\n                <List>\r\n                    {/*<ListItem button component={Link} to={'/lists'}>*/}\r\n                    {/*    <ListItemIcon />*/}\r\n                    {/*    <ListItemText primary={\"All list\"}/>*/}\r\n                    {/*</ListItem>*/}\r\n\r\n                    <ListItem onClick={props.handleDrawerClose} button component={Link} to={'/cards'}>\r\n                        <ListItemIcon/>\r\n                        <ListItemText primary={\"All songs\"}/>\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <FormControlLabel\r\n                            control={<Switch\r\n                                checked={props.getOnlyFavor}\r\n                                onChange={() => props.toogleGetOnlyFavor()}\r\n                                name=\"ShowOnlyFavor\"\r\n                                color=\"primary\"\r\n                            />}\r\n                            label=\"Show only favor\"\r\n                        />\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        <FormControlLabel\r\n                            control={<Switch\r\n                                checked={props.getOnlyFavor}\r\n                                onChange={() => props.toogleGetOnlyFavor()}\r\n                                name=\"ShowHide\"\r\n                                color=\"primary\"\r\n                            />}\r\n                            label=\"Show hide\"\r\n                        />\r\n                    </ListItem>\r\n\r\n                    <Divider/>\r\n\r\n                    <ListItem onClick={props.handleDrawerClose} button component={Link} to={'/sign/'}>\r\n                        <ListItemText primary={\"Logout\"}/>\r\n                    </ListItem>\r\n\r\n                </List>\r\n            </div>\r\n\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default AppDrawer\r\n","import AppBar from \"@material-ui/core/AppBar\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Container from '@material-ui/core/Container'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport InputBase from \"@material-ui/core/InputBase\"\r\nimport {fade, makeStyles} from \"@material-ui/core/styles\"\r\nimport Switch from \"@material-ui/core/Switch\"\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport React, {useState} from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport {Link as RouterLink} from \"react-router-dom\"\r\nimport {APP_HEADER} from \"../../constants/constants\"\r\nimport {setSongsList, setTerm, toogleGetOnlyFavor} from \"../../redux/song-reducer\"\r\nimport {toogleGetOnlyFavorUpdateList} from \"../../redux/thunks\"\r\nimport AppDrawer from \"../Drawer/AppDrawer\"\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            display: \"block\",\r\n        },\r\n    },\r\n    search: {\r\n        position: \"relative\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        \"&:hover\": {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: \"70%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: \"auto\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"12ch\",\r\n            \"&:focus\": {\r\n                width: \"20ch\",\r\n            },\r\n        },\r\n    },\r\n}))\r\n\r\nconst top100Films = [\r\n    {title: 'The Shawshank Redemption', year: 1994},\r\n    {title: 'The Godfather', year: 1972},\r\n    {title: 'The Godfather: Part II', year: 1974},\r\n    {title: 'The Dark Knight', year: 2008},\r\n    {title: '12 Angry Men', year: 1957},]\r\n\r\nconst SearchAppBar = props => {\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = (ev) => {\r\n        setOpen(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"sticky\">\r\n\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        <Button component={RouterLink} to=\"/\" style={{color: \"white\"}}>\r\n                            {APP_HEADER}\r\n                        </Button>\r\n                    </Typography>\r\n\r\n                    {/*<Switch*/}\r\n                    {/*    checked={props.getOnlyFavor}*/}\r\n                    {/*    checkedIcon={<FavoriteIcon/>}*/}\r\n                    {/*    icon={<FavoriteBorderIcon/>}*/}\r\n                    {/*    onChange={() => props.toogleGetOnlyFavor()}*/}\r\n                    {/*/>*/}\r\n\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon/>\r\n                        </div>\r\n                        <InputBase\r\n                            value={props.term}\r\n                            onChange={(ev)=>props.setTerm(ev.currentTarget.value)}\r\n                            placeholder=\"Search…\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            inputProps={{\"aria-label\": \"search\"}}\r\n                        />\r\n                    </div>\r\n\r\n                    {/*<div className={classes.search} style={{color: \"white\"}}>*/}\r\n                    {/*    <Highlights/>*/}\r\n                    {/*</div>*/}\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <AppDrawer\r\n                handleDrawerClose={handleDrawerClose}\r\n                getOnlyFavor={props.getOnlyFavor}\r\n                toogleGetOnlyFavor={props.toogleGetOnlyFavor}\r\n                open={open}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Highlights = () => (\r\n    <Autocomplete\r\n        id=\"highlights-demo\"\r\n        style={{width: 300}}\r\n        options={top100Films}\r\n        getOptionLabel={(option) => option.title}\r\n        renderInput={(params) => (\r\n            <TextField {...params} label=\"Highlights\" variant=\"outlined\" margin=\"normal\"/>\r\n        )}\r\n        renderOption={(option, {inputValue}) => {\r\n            const matches = match(option.title, inputValue);\r\n            const parts = parse(option.title, matches);\r\n\r\n            return (\r\n                <div>\r\n                    {parts.map((part, index) => (\r\n                        <span key={index} style={{fontWeight: part.highlight ? 700 : 400}}>\r\n                {part.text}\r\n              </span>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }}\r\n    />\r\n)\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        getOnlyFavor: state.songReducer.getOnlyFavor,\r\n        term: state.songReducer.term\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        toogleGetOnlyFavor,\r\n        toogleGetOnlyFavorUpdateList,\r\n        setTerm\r\n    })(SearchAppBar)\r\n{/*<Tooltip title=\"All cards\">*/\r\n}\r\n{/*    <IconButton*/\r\n}\r\n{/*        component={NavLink}*/\r\n}\r\n{/*        to={\"/cards/\"}*/\r\n}\r\n{/*        style={{color: \"white\"}}>*/\r\n}\r\n{/*        <FormatListNumberedOutlinedIcon/>*/\r\n}\r\n{/*    </IconButton>*/\r\n}\r\n{/*</Tooltip>*/\r\n}\r\n","export const APP_HEADER = 'Random Cards'\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n","import * as React from 'react'\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik'\r\nimport {Button, LinearProgress} from '@material-ui/core'\r\nimport {TextField} from 'formik-material-ui'\r\nimport {CheckboxWithLabel} from 'formik-material-ui';\r\nimport {connect} from 'react-redux'\r\nimport {addSongThunk} from '../../redux/thunks'\r\nimport history from '../../common/history';\r\n\r\nconst NewSongForm = (props) => (\r\n\r\n    <Formik\r\n        initialValues={{\r\n            name: '',\r\n            content: '',\r\n            favor: false\r\n        }}\r\n        validate={(values) => {\r\n            console.log('validate')\r\n            const errors = {}\r\n            if (!values.name) {\r\n                errors.name = 'Enter song name'\r\n            }\r\n            if (!values.content) {\r\n                errors.text = 'Enter song text'\r\n            }\r\n            return errors\r\n        }}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            props.addSongThunk(history, values.name, values.content, false)\r\n            setSubmitting(false)\r\n                // console.log(JSON.stringify(values, null, 2))\r\n        }}>\r\n        {({submitForm, isSubmitting, errors, touched, handleBlur, values, handleChange}) => (\r\n            <Form>\r\n                <Field\r\n                    component={TextField}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"name\"\r\n                    label=\"Song name\"\r\n                    name=\"name\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    value={values.name}\r\n                />\r\n\r\n                <ErrorMessage name=\"name\"/>\r\n\r\n                <Field\r\n                    component={CheckboxWithLabel}\r\n                    name=\"favor\"\r\n                    type={'checkbox'}\r\n                    Label={{label: 'Add to favor?'}}\r\n                />;\r\n\r\n                <Field\r\n                    component={TextField}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    fullWidth\r\n                    rows={window.innerHeight / 50}\r\n                    id=\"content\"\r\n                    label=\"Song text\"\r\n                    name=\"content\"\r\n                    multiline\r\n                    onChange={handleChange}\r\n                />\r\n                {touched.text && errors.text\r\n                    ? <div>{errors.text}</div>\r\n                    : null}\r\n                <br/>\r\n\r\n\r\n                {isSubmitting && <LinearProgress/>}\r\n\r\n                <br/>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={isSubmitting}\r\n                    onClick={submitForm}>\r\n                    Save\r\n                </Button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nexport default connect(null, {addSongThunk})(NewSongForm)\r\n","import {Box, IconButton} from '@material-ui/core'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport LoopIcon from '@material-ui/icons/Loop'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn'\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            flexWrap: 'nowrap'\r\n\r\n        },\r\n        fab: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(5),\r\n            right: theme.spacing(5),\r\n        },\r\n        floatButtonBlock: {\r\n            color: 'black',\r\n            position: 'absolute',\r\n            right: '10px',\r\n            top: '100px',\r\n            zIndex: 100,\r\n            '& Button': {\r\n                display: 'block'\r\n            }\r\n        },\r\n\r\n    }),\r\n);\r\n\r\nexport const FloatButtonBlock = (props) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Box className={classes.floatButtonBlock}>\r\n            <IconButton onClick={(ev) => props.shuffle(ev)}>\r\n                <LoopIcon/>\r\n            </IconButton>\r\n            <IconButton onClick={(e) => props.changefontSize(e, 1)}>\r\n                <ZoomInIcon/>\r\n            </IconButton>\r\n            <IconButton onClick={(e) => props.changefontSize(e, -1)}>\r\n                <ZoomOutIcon/>\r\n            </IconButton>\r\n            <IconButton>\r\n                {!props.editMode\r\n                    ? <EditIcon onClick={props.toogleEditMode}/>\r\n                    : <SaveIcon onClick={props.toogleEditMode}/>\r\n                }\r\n            </IconButton>\r\n\r\n        </Box>\r\n    )\r\n}\r\n","import {Container, IconButton, Typography} from '@material-ui/core'\r\nimport Button from '@material-ui/core/Button'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'\r\nimport {bindTrigger} from 'material-ui-popup-state'\r\nimport {bindPopper, bindToggle, usePopupState, anchorRef} from 'material-ui-popup-state/hooks'\r\nimport React, {useEffect, useRef, useState} from 'react'\r\nimport {useParams} from 'react-router'\r\nimport history from '../../common/history'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\n\r\nconst usePrevious = value => {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        border: '1px solid',\r\n        top: '20px',\r\n        left: '20px',\r\n        padding: theme.spacing(1),\r\n        backgroundColor: theme.palette.background.paper\r\n    },\r\n    typography: {\r\n        padding: theme.spacing(1),\r\n        opacity: 0.5\r\n    }\r\n}))\r\n\r\nconst SongTitle = (props) => {\r\n\r\n    const {id} = useParams()\r\n\r\n    const styles = useStyles()\r\n    const popupState = usePopupState({variant: 'popper', popupId: 'favorPopper'})\r\n    const favorIconRef = useRef()\r\n    const prevFavor = usePrevious(props.currentSongData.favor)\r\n    const prevId = usePrevious(id)\r\n\r\n\r\n    popupState.setAnchorEl(favorIconRef.current)\r\n\r\n    useEffect(() => {\r\n\r\n        console.log('prevId', prevId, 'id', id)\r\n\r\n        // (this.props.match.params.userId != prevProps.match.params.userId)\r\n        // if (prevFavor !== undefined) {\r\n        if ((id === prevId) && (prevFavor !== undefined)) {\r\n            popupState.open()\r\n            setTimeout(() => {\r\n                popupState.close()\r\n            }, 2000)\r\n        }\r\n\r\n    }, [props.currentSongData.favor])\r\n\r\n\r\n    const deleteSongHandler = () => {\r\n        const isDelete = window.confirm('Delete this song?')\r\n        if (isDelete) {\r\n            props.deleteSongThunk(props.currentSongData._id, history)\r\n        }\r\n    }\r\n\r\n\r\n    return <Container>\r\n\r\n        <Typography variant={'h6'} noWrap>\r\n            {props.currentSongData.name + (props.editMode ? ' (редактирование)' : '')}\r\n        </Typography>\r\n        <Typography variant={'caption'}>\r\n            {`last seen: ${new Date(props.currentSongData.time_last_seen).toLocaleDateString()}`}\r\n        </Typography>\r\n\r\n        <Popper anchorEl={favorIconRef} {...bindPopper(popupState)}>\r\n            <Paper>\r\n                <Typography className={styles.typography}>\r\n                    {props.currentSongData.favor\r\n                        ? 'Song add to favor'\r\n                        : 'Song deleted from favor'}\r\n                </Typography>\r\n            </Paper>\r\n        </Popper>\r\n\r\n        <IconButton\r\n            ref={favorIconRef}\r\n            onClick={() => props.toogleFavorThunk(props.currentSongData._id, props.currentSongData.favor)}>\r\n            {props.currentSongData.favor\r\n                ? <FavoriteIcon/>\r\n                : <FavoriteBorderIcon/>}\r\n\r\n        </IconButton>\r\n\r\n        <IconButton onClick={deleteSongHandler}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n\r\n        <IconButton\r\n            onClick={() => props.toogleHideThunk(props.currentSongData._id, props.currentSongData.hide)}>\r\n            {props.currentSongData.hide\r\n                ? <VisibilityOffIcon />\r\n                : <VisibilityIcon />}\r\n        </IconButton>\r\n\r\n    </Container>\r\n}\r\n\r\nexport default SongTitle\r\n","import React from 'react'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport {br2nl, nl2br} from '../../common/nl2br'\r\nimport Spinner from '../Spinner/Spinner';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Paper} from \"@material-ui/core\"\r\nimport {FloatButtonBlock} from './SongButtons';\r\nimport SongTitle from './SongTitle';\r\n\r\n\r\nexport type SongPropsType = {\r\n    getSongByRandomThunk: (history: any) => void\r\n    history: any\r\n    currentSongData: any\r\n    isLoading: boolean\r\n    fontSize: number\r\n    editMode: boolean\r\n    setFontSize: (size: number) => void\r\n    toogleFavorThunk: (id: number, favor: boolean) => void\r\n    toogleHideThunk: (id: number, hide: boolean) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    setSongContentThunk: (id: number, sanitizedHtml: string) => void\r\n    deleteSongThunk: (id: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            flexWrap: 'nowrap'\r\n\r\n        },\r\n        fab: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(5),\r\n            right: theme.spacing(5),\r\n        },\r\n        floatButtonBlock: {\r\n            color: 'black',\r\n            position: 'absolute',\r\n            right: '10px',\r\n            top: '100px',\r\n            zIndex: 100,\r\n            '& Button': {\r\n                display: 'block'\r\n            }\r\n        },\r\n        editable: {\r\n            fontSize: (props: SongPropsType) => props.fontSize,\r\n            padding: 10,\r\n            fontFace: 'Roboto',\r\n            // height: '100%'\r\n        }\r\n\r\n\r\n    }),\r\n);\r\n\r\n\r\nconst Song: React.FunctionComponent<SongPropsType> = (props: SongPropsType) => {\r\n\r\n    const classes = useStyles(props);\r\n    const contentEditable: React.RefObject<HTMLInputElement> = React.createRef();\r\n\r\n    if (props.isLoading || !props.currentSongData) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    const songContent = nl2br(props.currentSongData.content)\r\n\r\n    const shuffle = (e: any) => {\r\n        e.preventDefault()\r\n        if (props.editMode) {\r\n            props.setEditMode(false)\r\n        }\r\n        props.getSongByRandomThunk(props.history)\r\n    }\r\n\r\n    const changefontSize = (e: any, inc: number) => {\r\n        props.setFontSize(props.fontSize + inc)\r\n    }\r\n\r\n    const toogleEditMode = () => {\r\n        props.setEditMode(!props.editMode)\r\n        if (props.editMode && contentEditable.current) {\r\n            props.setSongContentThunk(props.currentSongData._id, br2nl(contentEditable.current.innerText))\r\n            props.setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FloatButtonBlock\r\n                shuffle={shuffle}\r\n                changefontSize={changefontSize}\r\n                toogleEditMode={toogleEditMode}\r\n                editMode={props.editMode}/>\r\n\r\n            <SongTitle\r\n                currentSongData={props.currentSongData}\r\n                editMode={props.editMode}\r\n                toogleFavorThunk={props.toogleFavorThunk}\r\n                toogleHideThunk={props.toogleHideThunk}\r\n                deleteSongThunk={props.deleteSongThunk}\r\n            />\r\n\r\n            <Paper elevation={3}>\r\n                <ContentEditable\r\n                    html={songContent}\r\n                    innerRef={contentEditable}\r\n                    disabled={!props.editMode}\r\n                    spellCheck={'false'}\r\n                    onChange={() => null}\r\n                    className={classes.editable}\r\n                />\r\n            </Paper>\r\n\r\n        </>)\r\n\r\n}\r\n\r\nexport default Song\r\n","export const nl2br = (str, isXhtml) => {\r\n    // Some latest browsers when str is null return and unexpected null value\r\n    if (typeof str === 'undefined' || str === null) {\r\n        return ''\r\n    }\r\n\r\n    // Adjust comment to avoid issue on locutus.io display\r\n    const breakTag = (isXhtml || typeof isXhtml === 'undefined') ? '<br ' + '/>' : '<br>'\r\n\r\n    return (str + '')\r\n        .replace(/(\\r\\n|\\n\\r|\\r|\\n)/g, breakTag + '$1')\r\n}\r\n\r\n/**\r\n * This function inverses text from PHP's nl2br() with default parameters.\r\n *\r\n * @param {string} str Input text\r\n * @param {boolean} replaceMode Use replace instead of insert\r\n * @return {string} Filtered text\r\n */\r\nexport function br2nl (str, replaceMode = true) {\r\n\r\n    if (typeof str === 'undefined' || str === null) {\r\n        return ''\r\n    }\r\n    const replaceStr = (replaceMode) ? \"\\n\" : '';\r\n    // Includes <br>, <BR>, <br />, </br>\r\n    // eslint-disable-next-line no-useless-escape\r\n    return str.replace(/<\\s*\\/?br\\s*[\\/]?>/gi, replaceStr);\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps} from 'react-router-dom'\r\nimport {setEditMode, setFontSize, setLastSongIndex} from '../../redux/song-reducer'\r\nimport {\r\n    deleteSongThunk,\r\n    getSongByIdThunk,\r\n    getSongByRandomThunk,\r\n    setSongContentThunk,\r\n    toogleFavorThunk,\r\n    toogleHideThunk\r\n} from '../../redux/thunks'\r\nimport Song, {SongPropsType} from './Song'\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n    index: string\r\n}\r\n\r\ntype OwnPropsTypes = {\r\n    getSongByIdThunk: (id: string, index: string) => void\r\n}\r\n\r\ntype SongContainerPropsType = RouteComponentProps<PathParamsType> & SongPropsType & OwnPropsTypes\r\n\r\nclass SongContainer extends React.Component<SongContainerPropsType> {\r\n\r\n    componentDidUpdate(prevProps: SongContainerPropsType) {\r\n        if (this.props.match.params.id !== prevProps.match.params.id) {\r\n            this.props.getSongByIdThunk(this.props.match.params.id, this.props.match.params.index)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getSongByIdThunk(this.props.match.params.id, this.props.match.params.index)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Song\r\n                    history={this.props.history}\r\n                    currentSongData={this.props.currentSongData}\r\n                    toogleFavorThunk={this.props.toogleFavorThunk}\r\n                    toogleHideThunk={this.props.toogleHideThunk}\r\n                    getSongByRandomThunk={this.props.getSongByRandomThunk}\r\n                    fontSize={this.props.fontSize}\r\n                    setFontSize={this.props.setFontSize}\r\n                    editMode={this.props.editMode}\r\n                    setEditMode={this.props.setEditMode}\r\n                    setSongContentThunk={this.props.setSongContentThunk}\r\n                    isLoading={this.props.isLoading}\r\n                    deleteSongThunk={this.props.deleteSongThunk}\r\n                />\r\n            </div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        currentSongData: state.songReducer.currentSongData,\r\n        isLoading: state.songReducer.isLoading,\r\n        fontSize: state.songReducer.fontSize,\r\n        editMode: state.songReducer.editMode\r\n    }\r\n}\r\n\r\nexport default connect<ReturnType<typeof mapStateToProps>>(mapStateToProps, {\r\n    getSongByIdThunk,\r\n    getSongByRandomThunk,\r\n    toogleFavorThunk,\r\n    setEditMode,\r\n    toogleHideThunk,\r\n    setSongContentThunk,\r\n    setFontSize,\r\n    setLastSongIndex,\r\n    deleteSongThunk\r\n})(SongContainer)\r\n\r\n","import Button from '@material-ui/core/Button'\r\nimport Container from \"@material-ui/core/Container\"\r\nimport Fab from '@material-ui/core/Fab'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport React from \"react\"\r\nimport {Link, NavLink} from \"react-router-dom\"\r\nimport Spinner from \"../Spinner/Spinner\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {FixedSizeList} from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport history from '../../common/history'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {},\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(5),\r\n        right: theme.spacing(4),\r\n    },\r\n    listContainer: {\r\n        // backgroundColor: 'red',\r\n        height: '85vh'\r\n    }\r\n}))\r\n\r\n\r\nconst VirtualizedListItem = ({index, style, data}) => {\r\n    // https://github.com/mui-org/material-ui/issues/16026\r\n\r\n    const song = data[index]\r\n\r\n    return <ListItem\r\n        key={index}\r\n        button\r\n        ContainerProps={{style: style}}\r\n        ContainerComponent=\"div\"\r\n    >\r\n        <ListItemIcon>\r\n            {song.favor\r\n                ? <FavoriteIcon/>\r\n                : <FavoriteBorderIcon/>}\r\n\r\n        </ListItemIcon>\r\n\r\n        <ListItemText component={Link} to={\"/card/\" + song._id}\r\n                      primary={song.name}\r\n                      onClick={() => history.push(\"/card/\" + song._id + '/' + index)}\r\n        />\r\n\r\n        <ListItemSecondaryAction onClick={()=>alert('!')}>\r\n            <IconButton edge=\"end\" aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItemSecondaryAction>\r\n\r\n    </ListItem>\r\n}\r\n\r\nconst WindowsList = (props) => {\r\n\r\n    const listRef = React.createRef();\r\n\r\n    const offset = () =>{\r\n        alert(props.lastSongIndex)\r\n        listRef.current.scrollToItem(parseInt(props.lastSongIndex), \"start\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*//<Button variant=\"contained\" onClick={offset}>Default</Button>*/}\r\n            <AutoSizer>\r\n                {({height, width}) => {\r\n                    return (\r\n                        <FixedSizeList\r\n                            ref={listRef}\r\n                            itemData={props.songs}\r\n                            itemCount={props.songs.length}\r\n                            overscanCount={20}\r\n                            height={height}\r\n                            width={width}\r\n                            itemSize={48}\r\n                            initialScrollOffset={parseInt(props.lastSongIndex)}\r\n                        >\r\n                            {VirtualizedListItem}\r\n                        </FixedSizeList>)\r\n                }}\r\n            </AutoSizer>\r\n        </>)\r\n\r\n}\r\n\r\n\r\nexport const SongList = ({songs, isLoading, lastSongIndex}) => {\r\n\r\n    const styles = useStyles()\r\n\r\n    if (isLoading) {\r\n        return <Spinner/>\r\n    }\r\n    return (\r\n\r\n        <Container className={styles.listContainer}>\r\n\r\n            <Typography variant={\"h4\"}>\r\n                All songs\r\n            </Typography>\r\n\r\n            {/*<List>*/}\r\n            {/*    {songs.map(item => <SongListItem song={item} key={item._id}/>)}*/}\r\n            {/*</List>*/}\r\n\r\n            <WindowsList songs={songs}\r\n                         lastSongIndex={lastSongIndex}/>\r\n\r\n            <Fab component={NavLink} to={'/new'} className={styles.fab} color=\"primary\" aria-label=\"add\">\r\n                <AddIcon/>\r\n            </Fab>\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\n//\r\n// const SongListItem = ({song}) => {\r\n//\r\n//     return <ListItem\r\n//         button\r\n//     >\r\n//         <ListItemIcon>\r\n//             {song.favor\r\n//                 ? <FavoriteIcon/>\r\n//                 : <FavoriteBorderIcon/>}\r\n//\r\n//         </ListItemIcon>\r\n//\r\n//         <ListItemText button\r\n//                       component={Link}\r\n//                       to={\"/card/\" + song._id}\r\n//                       primary={song.name}\r\n//         />\r\n//\r\n//         {/*<ListItemSecondaryAction button onClick={()=>alert('111')}>*/}\r\n//         {/*    <IconButton edge=\"end\" aria-label=\"delete\" onClick={()=>alert('111')}>*/}\r\n//         {/*        <DeleteIcon onClick={()=>alert('111')}/>*/}\r\n//         {/*    </IconButton>*/}\r\n//         {/*</ListItemSecondaryAction>*/}\r\n//     </ListItem>\r\n//\r\n// }\r\n\r\n\r\nexport default SongList\r\n\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {setTerm} from '../../redux/song-reducer'\r\nimport {getSongsListThunk, toogleFavorThunk, deleteSongThunk} from '../../redux/thunks'\r\nimport SongList from \"./SongList\";\r\nimport {createSelector} from 'reselect'\r\nimport {SongType} from \"../../constants/types\"\r\n\r\nconst getSongs = (state: any) => state.songReducer.songs\r\nconst getTerm = (state: any) => state.songReducer.term\r\nconst getOnlyFavor = (state: any) => state.songReducer.getOnlyFavor\r\nconst showHidden = (state: any) => state.songReducer.showHidden\r\n\r\nconst filtredSongsSelector = createSelector(\r\n    [getSongs, getTerm, getOnlyFavor],\r\n    (songs, term, getOnlyFavor) => {\r\n        // let filteredSongs = songs.filter((item: any) => item.name.includes(term))\r\n        let filteredSongs = songs.filter((item: SongType) => !item.hide)\r\n\r\n        if (getOnlyFavor) {\r\n            filteredSongs = songs.filter((item: any) => item.favor)\r\n        }\r\n\r\n        if (!showHidden) {\r\n            filteredSongs = songs.filter((item: SongType) => !item.hide)\r\n        }\r\n\r\n        const cyrillic = (a: any) => 10 > a ? 2e4 + +a : a.charCodeAt(0);\r\n        filteredSongs = filteredSongs.sort((a: any, b: any) => cyrillic(a.name) - cyrillic(b.name))\r\n        return filteredSongs.sort((a: SongType, b: SongType) => 0.5 - Math.random())\r\n    }\r\n)\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        songs: filtredSongsSelector(state),\r\n        term: getTerm(state),\r\n        isLoading: state.songReducer.isLoading,\r\n        getOnlyFavor: state.songReducer.getOnlyFavor,\r\n        lastSongIndex: state.songReducer.lastSongIndex\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getSongsListThunk, setTerm, toogleFavorThunk, deleteSongThunk})(SongList)\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport appReducer from './app-reducer'\r\nimport reducer from './song-reducer'\r\nimport {createLogger} from 'redux-logger'\r\n//\r\nconst logger = createLogger({\r\n    // collapsed: () => (true),\r\n    // predicate: (getState, action) => !action.type.includes('@@redux-form'),\r\n    level: 'log',\r\n});\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger]\r\n\r\nconst store = configureStore(\r\n    {\r\n        reducer: {\r\n            songReducer: reducer,\r\n            app: appReducer\r\n        },\r\n        middleware\r\n    }\r\n)\r\n\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst Copyright = () => (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n            Your Website\r\n        </Link>{' '}\r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n    </Typography>\r\n)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nconst SignIn = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\nexport default SignIn\r\n","import CssBaseline from \"@material-ui/core/CssBaseline\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport React from \"react\"\nimport {connect, Provider} from \"react-redux\"\nimport {Router, Route, Switch} from \"react-router-dom\"\nimport {compose} from \"redux\"\nimport {PopperContext} from './components/Context/PopperContext'\nimport ErrorPage from \"./components/ErrorPage/ErrorPage\"\nimport {Main} from \"./components/Info/Main\"\nimport ListContainer from \"./components/List/ListContainer\"\nimport SearchAppBar from \"./components/AppBar/SearchAppBar\"\nimport NewSongForm from './components/Song/NewSongForm'\nimport SongContainer from \"./components/Song/SongContainer\"\nimport SongsListContainer from \"./components/SongList/SongsListContainer\"\nimport {initializeApp} from \"./redux/app-reducer\"\nimport store from \"./redux/store\"\nimport SignIn from \"./SignIn/SignIn\"\nimport history from './common/history';\n\n\n// type PropsType = {\n//     initialized: boolean\n//     initializeApp: () => void\n//     onSetSidebarOpen: () => void\n// }\n\nclass App extends React.Component {\n// class App extends React.Component<PropsType, StateType > {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n\n        if (this.props.error) {\n            return <ErrorPage error={this.props.error}/>\n        }\n\n        if (!this.props.initialized) {\n            return <LinearProgress/>\n        }\n\n        const routes = (\n            <Switch>\n                <Route path='/cards/' exact render={() => <SongsListContainer/>}/>\n                <Route path='/lists/' exact render={() => <ListContainer/>}/>\n                <Route path='/sign/' exact render={() => <SignIn/>}/>\n                <Route path='/new/' exact render={() => <NewSongForm/>}/>\n                <Route path='/card/:id/:index(\\d+)?' component={SongContainer}/>\n                <Route exact component={Main}/>\n            </Switch>\n        )\n\n        return (\n            // <Layout>\n            <>\n                <CssBaseline/>\n                {/*<TemporaryDrawer/>*/}\n                <SearchAppBar/>\n                {routes}\n\n            </>\n            // </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        initialized: state.app.initialized,\n        error: state.app.error\n    }\n}\n\nconst AppContainer = compose(\n    // withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst RandomCardsApp = () => {\n    return <Router history={history}>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </Router>\n\n}\nexport default RandomCardsApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomCardsApp from './App'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RandomCardsApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}