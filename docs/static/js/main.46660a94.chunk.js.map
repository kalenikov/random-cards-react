{"version":3,"sources":["components/Songs/SongList/SongListItem/SongListItem.module.css","components/ErrorPage/ErrorPage.js","components/Info/Main.js","components/Spinner/Spinner.js","components/List/List.tsx","components/List/ListContainer.tsx","redux/song-reducer.ts","api/api.js","redux/app-reducer.ts","redux/thunks.ts","components/SearchAppBar/SidebarDrawer.js","components/SearchAppBar/SearchAppBar.js","constants/constants.js","components/Songs/Song/Song.tsx","common/nl2br.js","components/Songs/Song/SongContainer.tsx","components/Songs/SongList/SongList.js","components/Songs/SongList/SongsListContainer.tsx","redux/store.ts","SignIn/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ErrorPage","error","Typography","variant","Main","Container","maxWidth","Spinner","LinearProgress","SongList","props","isLoading","connect","state","lists","List","songsSlice","createSlice","name","initialState","songs","currentSongId","currentSongData","favor","getOnlyFavor","term","fontSize","editMode","reducers","setSongId","action","payload","setSongData","toogleGetOnlyFavor","setSongsList","setTerm","setFontSize","setEditMode","setLoadingOn","setLoadingOff","toogleFavor","map","song","_id","actions","reducer","baseURL","instance","axios","headers","SongAPI","get","songId","post","content","appSlice","initialized","initializedSuccess","setError","getSongsListThunk","dispatch","getState","a","songReducer","response","data","console","toString","toogleFavorThunk","useStyles","makeStyles","theme","createStyles","list","width","drawer","breakpoints","up","flexShrink","SidebarDrawer","handleDrawerClose","open","classes","Drawer","className","anchor","onClose","paper","drawerPaper","role","onClick","onKeyDown","Avatar","Divider","ListItem","button","component","Link","to","ListItemIcon","ListItemText","primary","root","flexGrow","menuButton","marginRight","spacing","title","display","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","toogleGetOnlyFavorUpdateList","filter","useState","React","setOpen","AppBar","Toolbar","IconButton","edge","aria-label","noWrap","Button","RouterLink","style","Switch","checked","checkedIcon","icon","onChange","InputBase","placeholder","input","inputProps","flexDirection","flexWrap","fab","bottom","right","floatButtonBlock","top","zIndex","Song","contentEditable","createRef","str","isXhtml","songContent","replace","changefontSize","e","inc","toogleEditMode","current","setSongContentThunk","replaceMode","replaceStr","br2nl","innerText","FloatButtonBlock","Box","ev","preventDefault","getSongByRandomThunk","history","Date","time_last_seen","toLocaleDateString","Paper","elevation","html","innerRef","disabled","spellCheck","fontFace","SongContainer","prevProps","this","match","params","id","getSongByIdThunk","Component","length","item","Math","floor","random","push","status","background","key","getTerm","filtredSongsSelector","createSelector","filteredSongs","includes","cyrillic","charCodeAt","sort","b","logger","createLogger","level","middleware","getDefaultMiddleware","store","configureStore","app","appReducer","Copyright","align","href","getFullYear","marginTop","avatar","margin","secondary","main","form","submit","SignIn","CssBaseline","noValidate","TextField","required","fullWidth","label","autoComplete","autoFocus","type","FormControlLabel","control","Checkbox","value","Grid","container","xs","mt","App","initializeApp","routes","path","exact","render","SongsListContainer","ListContainer","AppContainer","compose","RandomCardsApp","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.46660a94.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"song\":\"SongListItem_song__1fkFe\",\"songName\":\"SongListItem_songName__BA5TN\",\"lastSeen\":\"SongListItem_lastSeen__2WHLC\"};","import Typography from \"@material-ui/core/Typography\"\r\nimport React from \"react\"\r\n\r\nconst ErrorPage = ({error}) => {\r\n    return <Typography variant={'h1'}>\r\n        {error}\r\n    </Typography>\r\n}\r\n\r\nexport default ErrorPage\r\n","import Container from \"@material-ui/core/Container\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport React from \"react\"\r\n// import Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nexport const Main = () => (\r\n\r\n    <>\r\n        {/*<CssBaseline/>*/}\r\n        <Container maxWidth=\"lg\">\r\n            <div>\r\n                <h1>Random cards</h1>\r\n                <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A ab, amet aperiam doloremque ducimus\r\n                    eaque,\r\n                    enim, et facilis neque optio provident quam quas quod rem repellat rerum sequi sit suscipit.\r\n                </div>\r\n                <div>Accusamus alias architecto, aut cupiditate doloremque eveniet fugiat impedit in molestias nihil\r\n                    odio\r\n                    officiis porro, quo reiciendis rem tempora voluptates. Autem cum, error esse facere modi officiis\r\n                    quibusdam\r\n                    quisquam unde.\r\n                </div>\r\n                <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto beatae corporis culpa eum\r\n                    excepturi\r\n                    explicabo impedit iure minima minus molestiae nulla odit possimus quas, rem saepe soluta suscipit\r\n                    temporibus\r\n                    voluptas?\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    </>\r\n\r\n)\r\n","import CircularProgress from \"@material-ui/core/CircularProgress\"\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\r\nimport React from 'react'\r\n\r\nconst Spinner = () => {\r\n    // return <CircularProgress />\r\n    return <LinearProgress />\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport { ListType } from '../../constants/types';\r\nimport Spinner from \"../Spinner/Spinner\"\r\n\r\nexport function SongList(props: any): any {\r\n\r\n    if (props.isLoading) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    // return <>\r\n    //     <h1>My lists</h1>\r\n    //     <ListGroup>\r\n    //         {props.lists.map((list: ListType) =>\r\n    //             <ListGroup.Item action key={list._id}>\r\n    //                 {list.name}\r\n    //             </ListGroup.Item>\r\n    //         )}\r\n    //     </ListGroup>\r\n    // </>\r\n}\r\n\r\n\r\nexport default SongList\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport List from \"./List\";\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        lists: state.lists,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(List)\r\n","import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    songs: [] as Array<SongType>,\r\n    currentSongId: null,\r\n    currentSongData: {\r\n        favor: false\r\n    },\r\n    isLoading: false,\r\n    getOnlyFavor: false,\r\n    term: '',\r\n    fontSize: 14,\r\n    editMode: false\r\n}\r\ntype SongType = {\r\n    _id: string\r\n    name: string\r\n    favor: boolean\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst songsSlice = createSlice({\r\n        name: 'songs',\r\n        initialState,\r\n        reducers: {\r\n            setSongId: (state, action) => {\r\n                state.currentSongId = action.payload\r\n            },\r\n            setSongData: (state, action) => {\r\n                state.currentSongData = action.payload\r\n            },\r\n            toogleGetOnlyFavor: (state) => {\r\n                state.getOnlyFavor = !state.getOnlyFavor\r\n            },\r\n            setSongsList: (state, action) => {\r\n                state.songs = action.payload\r\n            },\r\n            setTerm: (state, action) => {\r\n                state.term = action.payload\r\n            },\r\n            setFontSize: (state, action) => {\r\n                state.fontSize = action.payload\r\n            },\r\n            setEditMode: (state, action) => {\r\n                state.editMode = action.payload\r\n            },\r\n            setLoadingOn: (state) => {\r\n                state.isLoading = true\r\n            },\r\n            setLoadingOff: (state) => {\r\n                state.isLoading = false\r\n            },\r\n            toogleFavor: (state, action) => {\r\n                if (state.currentSongData) {\r\n                    state.currentSongData.favor = !state.currentSongData.favor\r\n                }\r\n                state.songs.map((song: SongType) => {\r\n                    if (song._id === action.payload) {\r\n                        song.favor = !song.favor\r\n                    }\r\n                    return song\r\n                })\r\n            },\r\n        }\r\n    }\r\n)\r\n\r\nconst {actions, reducer} = songsSlice\r\n\r\nexport const {\r\n    setSongId,\r\n    setSongData,\r\n    toogleGetOnlyFavor,\r\n    setSongsList,\r\n    setTerm,\r\n    toogleFavor,\r\n    setLoadingOff,\r\n    setLoadingOn,\r\n    setEditMode,\r\n    setFontSize\r\n} = actions\r\n\r\nexport default reducer\r\n","import * as axios from 'axios'\n\nlet baseURL = ''\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    baseURL = 'http://localhost:5000/api/v1/'\n} else {\n    // baseURL = 'http://37.228.117.161:5000/api/v1/'\n    // baseURL = 'http://192.168.0.100:5000/api/v1/'\n    baseURL = 'http://localhost:5000/api/v1/'\n}\n\nconst instance = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n    },\n})\n\nexport const SongAPI = {\n\n    getSongsList(getOnlyFavor) {\n        return instance.get('/cards?limit=999' + (getOnlyFavor ? '&favor=true' : ''))\n        // return instance.get('/cards', {favor: false, name: ''})\n    },\n    getSong(songId) {\n        return instance.get('/cards?id=' + songId)\n    },\n    getSongRandom() {\n        return instance.get('/cards?random=true&limit=1')\n    },\n    setFavor(songId, favor) {\n        const result = instance.post('/cards', {_id: songId, favor: favor})\n        return result\n    },\n    setContent(songId, content) {\n        return instance.post('/cards', {_id: songId, content: content})\n    }\n}\n\n","import {createSlice} from '@reduxjs/toolkit'\r\nimport {getSongsListThunk} from './thunks'\r\nimport {Dispatch} from \"redux\"\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n    error: ''\r\n};\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        initializedSuccess: (state) => {\r\n            state.initialized = true\r\n        },\r\n        setError: (state, action)=>{\r\n            state.error = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nconst {actions, reducer} = appSlice\r\nexport const {initializedSuccess, setError} = actions\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getSongsListThunk());\r\n    dispatch(initializedSuccess());\r\n}\r\n\r\n\r\nexport default reducer;\r\n","import {SongAPI} from '../api/api'\r\nimport {setLoadingOff, setLoadingOn, setSongData, setSongId, setSongsList, toogleFavor, toogleGetOnlyFavor} from './song-reducer'\r\nimport {setError} from './app-reducer'\r\nimport {SongType} from \"../constants/types\"\r\n\r\nexport const getSongsListThunk = () => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const getOnlyFavor = getState().songReducer.getOnlyFavor\r\n    try {\r\n        const response = await SongAPI.getSongsList(getOnlyFavor)\r\n        dispatch(setSongsList(response.data))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(setError(e.toString()))\r\n    }\r\n\r\n    dispatch(setLoadingOff())\r\n\r\n}\r\n\r\nexport const getSongByIdThunk = (songId: number) => async (dispatch: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.getSong(songId)\r\n    if (response.data.length === 1) {\r\n        dispatch(setLoadingOff())\r\n        dispatch(setSongData(response.data[0]))\r\n    }\r\n}\r\n\r\nexport const getSongByRandomThunk = (history: any) => (dispatch: any, getState: any) => {\r\n    const state = getState().songReducer\r\n    let songs = state.songs\r\n    if (state.getOnlyFavor) {\r\n        songs = state.songs.filter((item: SongType) => item.favor)\r\n    }\r\n    const song = songs[Math.floor(Math.random() * songs.length)];\r\n    dispatch(setSongId(song._id))\r\n    history.push('/card/' + song._id)\r\n}\r\n\r\nexport const toogleFavorThunk = (songId: number, favor: boolean) => async (dispatch: any) => {\r\n    await SongAPI.setFavor(songId, !favor)\r\n    dispatch(toogleFavor(songId))\r\n}\r\n\r\nexport const setSongContentThunk = (songId: number, content: string) => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.setContent(songId, content)\r\n    if (response.status === 202) {\r\n        dispatch(setLoadingOff())\r\n        dispatch(setSongData({...getState().songReducer.currentSongData, content: content}))\r\n    }\r\n}\r\nexport const toogleGetOnlyFavorUpdateList = (songId: number, favor: boolean) => async (dispatch: any, getState: any) => {\r\n    dispatch(toogleGetOnlyFavor())\r\n    if (getState().songReducer.getOnlyFavor){\r\n        dispatch(setSongsList(getState().songReducer.songs.filter((song: SongType) => song.favor)))\r\n    }\r\n\r\n}\r\n","import Avatar from \"@material-ui/core/Avatar\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport Drawer from \"@material-ui/core/Drawer\"\r\nimport List from \"@material-ui/core/List\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\r\nimport React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst useStyles = makeStyles(theme =>\r\n    createStyles({\r\n        list: {\r\n            width: 250,\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                width: 240,\r\n                flexShrink: 0,\r\n            },\r\n        },\r\n    }))\r\n\r\nconst SidebarDrawer = ({handleDrawerClose, open}) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"temporary\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            onClose={handleDrawerClose}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <div\r\n                className={classes.list}\r\n                role=\"presentation\"\r\n                onClick={handleDrawerClose}\r\n                onKeyDown={handleDrawerClose}\r\n            >\r\n                <List>\r\n                    <Avatar>Sergey</Avatar>\r\n\r\n                    <Divider />\r\n\r\n                    {/*<ListItem button component={Link} to={'/lists'}>*/}\r\n                    {/*    <ListItemIcon />*/}\r\n                    {/*    <ListItemText primary={\"All list\"}/>*/}\r\n                    {/*</ListItem>*/}\r\n\r\n                    <ListItem button component={Link} to={'/cards'}>\r\n                        <ListItemIcon />\r\n                        <ListItemText primary={\"All songs\"}/>\r\n                    </ListItem>\r\n\r\n                    <Divider />\r\n\r\n                    <ListItem button component={Link} to={'/sign/'}>\r\n                        <ListItemText primary={\"Logout\"}/>\r\n                    </ListItem>\r\n\r\n                </List>\r\n            </div>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default SidebarDrawer\r\n","import AppBar from \"@material-ui/core/AppBar\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport InputBase from \"@material-ui/core/InputBase\"\r\nimport {fade, makeStyles} from \"@material-ui/core/styles\"\r\nimport Switch from \"@material-ui/core/Switch\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport React, {useState} from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport {Link as RouterLink} from \"react-router-dom\"\r\nimport {APP_HEADER} from \"../../constants/constants\"\r\nimport {setSongsList, toogleGetOnlyFavor} from \"../../redux/song-reducer\"\r\nimport {toogleGetOnlyFavorUpdateList} from \"../../redux/thunks\"\r\nimport SidebarDrawer from \"./SidebarDrawer\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            display: \"block\",\r\n        },\r\n    },\r\n    search: {\r\n        position: \"relative\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        \"&:hover\": {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: \"70%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: \"auto\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"12ch\",\r\n            \"&:focus\": {\r\n                width: \"20ch\",\r\n            },\r\n        },\r\n    },\r\n}))\r\n\r\nconst SearchAppBar = props => {\r\n\r\n    const [favor, setFavor] = useState(false)\r\n\r\n    const preventDefault = (event) => event.preventDefault()\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        <Button component={RouterLink} to=\"/\" style={{color: \"white\"}}>\r\n                            {APP_HEADER}\r\n                        </Button>\r\n                    </Typography>\r\n\r\n\r\n                    <Switch\r\n                        checked={props.getOnlyFavor}\r\n                        checkedIcon={<FavoriteIcon/>}\r\n                        icon={<FavoriteBorderIcon/>}\r\n                        onChange={() => props.toogleGetOnlyFavor()}\r\n                    />\r\n\r\n                    {/*<FormControlLabel*/}\r\n                    {/*    control={favorSwitch}*/}\r\n                    {/*    label=\"fav\"*/}\r\n                    {/*/>*/}\r\n\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon/>\r\n                        </div>\r\n                        <InputBase\r\n                            placeholder=\"Search…\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            inputProps={{\"aria-label\": \"search\"}}\r\n                        />\r\n                    </div>\r\n\r\n                    {/*<Tooltip title=\"All cards\">*/}\r\n                    {/*    <IconButton*/}\r\n                    {/*        component={NavLink}*/}\r\n                    {/*        to={\"/cards/\"}*/}\r\n                    {/*        style={{color: \"white\"}}>*/}\r\n                    {/*        <FormatListNumberedOutlinedIcon/>*/}\r\n                    {/*    </IconButton>*/}\r\n                    {/*</Tooltip>*/}\r\n\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <SidebarDrawer\r\n                handleDrawerClose={handleDrawerClose}\r\n                open={open}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        getOnlyFavor: state.songReducer.getOnlyFavor,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {toogleGetOnlyFavor, toogleGetOnlyFavorUpdateList})(SearchAppBar)\r\n","export const APP_HEADER = 'Random Cards'\r\n","import React from 'react'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport {br2nl, nl2br} from '../../../common/nl2br'\r\nimport s from './Song.module.css'\r\nimport Spinner from '../../Spinner/Spinner';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport {Container, Paper, Grid, Typography, Fab, Box, IconButton, ButtonGroup} from \"@material-ui/core\"\r\nimport AlarmIcon from '@material-ui/icons/Alarm';\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\n\r\n\r\nexport type SongPropsType = {\r\n    getSongByRandomThunk: (history: any) => void\r\n    history: any\r\n    currentSongData: any\r\n    isLoading: boolean\r\n    fontSize: number\r\n    editMode: boolean\r\n    setFontSize: (size: number) => void\r\n    toogleFavorThunk: (id: number, favor: boolean) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    setSongContentThunk: (id: number, sanitizedHtml: string) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            flexWrap: 'nowrap'\r\n\r\n        },\r\n        fab: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(5),\r\n            right: theme.spacing(5),\r\n        },\r\n        floatButtonBlock: {\r\n            color: 'black',\r\n            position: 'absolute',\r\n            right: '10px',\r\n            top: '100px',\r\n            zIndex: 100,\r\n            '& Button': {\r\n                display: 'block'\r\n            }\r\n        },\r\n\r\n    }),\r\n);\r\n\r\n\r\nconst Song: React.FunctionComponent<SongPropsType> = (props: SongPropsType) => {\r\n\r\n    const classes = useStyles();\r\n    const contentEditable: React.RefObject<HTMLInputElement> = React.createRef();\r\n\r\n    if (props.isLoading || !props.currentSongData) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    const songContent = nl2br(props.currentSongData.content)\r\n\r\n    const shuffle = (e: any) => {\r\n        e.preventDefault()\r\n        if (props.editMode) {\r\n            props.setEditMode(false)\r\n        }\r\n        props.getSongByRandomThunk(props.history)\r\n    }\r\n\r\n    const changefontSize = (e: any, inc: number) => {\r\n        props.setFontSize(props.fontSize + inc)\r\n    }\r\n\r\n    const toogleEditMode = () => {\r\n        props.setEditMode(!props.editMode)\r\n        if (props.editMode && contentEditable.current) {\r\n            props.setSongContentThunk(props.currentSongData._id, br2nl(contentEditable.current.innerText))\r\n            props.setEditMode(false)\r\n        }\r\n    }\r\n\r\n    const FloatButtonBlock = () => {\r\n        return (\r\n            <Box className={classes.floatButtonBlock}>\r\n                <IconButton onClick={(ev: any) => shuffle(ev)}>\r\n                    <LoopIcon/>\r\n                </IconButton>\r\n                <IconButton onClick={(e: any) => changefontSize(e, 1)}>\r\n                    <ZoomInIcon/>\r\n                </IconButton>\r\n                <IconButton onClick={(e: any) => changefontSize(e, -1)}>\r\n                    <ZoomOutIcon/>\r\n                </IconButton>\r\n                <IconButton>\r\n                    {!props.editMode\r\n                        ? <EditIcon onClick={toogleEditMode}/>\r\n                        : <SaveIcon onClick={toogleEditMode}/>\r\n                    }\r\n                </IconButton>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <FloatButtonBlock/>\r\n\r\n            <Container>\r\n                <Typography variant={'h6'} noWrap>\r\n                    {props.currentSongData.name + (props.editMode ? ' (редактирование)' : '')}\r\n                </Typography>\r\n                <Typography variant={'caption'}>\r\n                    {`last seen: ${new Date(props.currentSongData.time_last_seen).toLocaleDateString()}`}\r\n                </Typography>\r\n\r\n                <IconButton\r\n                    onClick={() => props.toogleFavorThunk(props.currentSongData._id, props.currentSongData.favor)}>\r\n\r\n                    {props.currentSongData.favor\r\n                        ? <FavoriteIcon/>\r\n                        : <FavoriteBorderIcon/>}\r\n\r\n                </IconButton>\r\n\r\n            </Container>\r\n\r\n\r\n            <Paper elevation={3}>\r\n\r\n                <ContentEditable\r\n                    html={songContent}\r\n                    innerRef={contentEditable}\r\n                    disabled={!props.editMode}\r\n                    spellCheck={'false'}\r\n                    onChange={() => null}\r\n                    // autoFocus={true}\r\n                    // className={s.editable}\r\n                    style={{fontSize: props.fontSize, padding: 10, fontFace: 'Roboto'}}\r\n                />\r\n            </Paper>\r\n\r\n        </>)\r\n\r\n}\r\n\r\nexport default Song\r\n\r\n{/*{fabs.map((fab, index) => (*/\r\n}\r\n{/*    <Fab key={index} aria-label={fab.label} className={fab.className} color={fab.color}>*/\r\n}\r\n{/*        {fab.icon}*/\r\n}\r\n{/*    </Fab>*/\r\n}\r\n{/*))}*/\r\n}\r\n{/*<div className={classes.root}>*/\r\n}\r\n{/*    {fabs.map((fab, index) => (*/\r\n}\r\n{/*        <Fab aria-label={fab.label} className={fab.className} color={fab.color}>*/\r\n}\r\n{/*            {fab.icon}*/\r\n}\r\n{/*        </Fab>*/\r\n}\r\n{/*    ))}*/\r\n}\r\n{/*</div>*/\r\n}\r\n","export const nl2br = (str, isXhtml) => {\r\n    // Some latest browsers when str is null return and unexpected null value\r\n    if (typeof str === 'undefined' || str === null) {\r\n        return ''\r\n    }\r\n\r\n    // Adjust comment to avoid issue on locutus.io display\r\n    const breakTag = (isXhtml || typeof isXhtml === 'undefined') ? '<br ' + '/>' : '<br>'\r\n\r\n    return (str + '')\r\n        .replace(/(\\r\\n|\\n\\r|\\r|\\n)/g, breakTag + '$1')\r\n}\r\n\r\n/**\r\n * This function inverses text from PHP's nl2br() with default parameters.\r\n *\r\n * @param {string} str Input text\r\n * @param {boolean} replaceMode Use replace instead of insert\r\n * @return {string} Filtered text\r\n */\r\nexport function br2nl (str, replaceMode = true) {\r\n\r\n    if (typeof str === 'undefined' || str === null) {\r\n        return ''\r\n    }\r\n    const replaceStr = (replaceMode) ? \"\\n\" : '';\r\n    // Includes <br>, <BR>, <br />, </br>\r\n    // eslint-disable-next-line no-useless-escape\r\n    return str.replace(/<\\s*\\/?br\\s*[\\/]?>/gi, replaceStr);\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {compose} from 'redux'\r\nimport {setEditMode, setFontSize} from '../../../redux/song-reducer'\r\nimport {getSongByIdThunk, getSongByRandomThunk, setSongContentThunk, toogleFavorThunk} from '../../../redux/thunks'\r\nimport Song, {SongPropsType} from './Song'\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n}\r\n\r\ntype OwnPropsTypes = {\r\n    getSongByIdThunk: (id: string) => void\r\n}\r\n\r\ntype SongContainerPropsType = RouteComponentProps<PathParamsType> & SongPropsType & OwnPropsTypes\r\n\r\nclass SongContainer extends React.Component<SongContainerPropsType> {\r\n\r\n    componentDidUpdate(prevProps: SongContainerPropsType) {\r\n        if (this.props.match.params.id !== prevProps.match.params.id) {\r\n            this.props.getSongByIdThunk(this.props.match.params.id)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getSongByIdThunk(this.props.match.params.id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Song\r\n                    history={this.props.history}\r\n                    currentSongData={this.props.currentSongData}\r\n                    toogleFavorThunk={this.props.toogleFavorThunk}\r\n                    getSongByRandomThunk={this.props.getSongByRandomThunk}\r\n                    fontSize={this.props.fontSize}\r\n                    setFontSize={this.props.setFontSize}\r\n                    editMode={this.props.editMode}\r\n                    setEditMode={this.props.setEditMode}\r\n                    setSongContentThunk={this.props.setSongContentThunk}\r\n                    isLoading={this.props.isLoading}\r\n                />\r\n            </div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        currentSongData: state.songReducer.currentSongData,\r\n        isLoading: state.songReducer.isLoading,\r\n        fontSize: state.songReducer.fontSize,\r\n        editMode: state.songReducer.editMode\r\n    }\r\n}\r\n\r\n// export default compose(connect<ReturnType<typeof mapStateToProps>>(mapStateToProps, {\r\n//         getSongByIdThunk,\r\n//         getSongByRandomThunkLocal,\r\n//         toogleFavorThunk,\r\n//         setSongContentThunk,\r\n//         setFontSize,\r\n//         setEditMode,\r\n//     }),\r\n//     withRouter)(SongContainer)\r\n\r\nexport default connect<ReturnType<typeof mapStateToProps>>(mapStateToProps, {\r\n        getSongByIdThunk,\r\n        getSongByRandomThunk,\r\n        toogleFavorThunk,\r\n        setSongContentThunk,\r\n        setFontSize,\r\n        setEditMode,\r\n    })(SongContainer)\r\n\r\n","import Container from \"@material-ui/core/Container\"\r\nimport React from \"react\"\r\nimport InputSongName from \"./InputSongName\"\r\nimport {SongListItem} from \"./SongListItem/SongListItem\"\r\nimport {SongType} from \"../../../constants/types\"\r\nimport Spinner from \"../../Spinner/Spinner\"\r\nimport List from \"@material-ui/core/List\"\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport InboxIcon from \"@material-ui/icons/Inbox\"\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {FixedSizeList} from \"react-window\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"100%\",\r\n        maxWidth: 360,\r\n        marginLeft: 20,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}))\r\n\r\nexport const SongList = props => {\r\n\r\n    const classes = useStyles()\r\n\r\n    if (props.isLoading) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Typography variant={\"h4\"}>\r\n                All songs\r\n            </Typography>\r\n            <div className={classes.root}>\r\n\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                    {/*<FixedSizeList itemCount={props.songs.length} height={400} itemSize={46}>*/}\r\n\r\n                    {props.songs.map((song) =>\r\n                        {\r\n                            return (\r\n\r\n                                <ListItem button key={song._id}\r\n                                          component={Link} to={\"/card/\" + song._id}\r\n                                >\r\n\r\n                                    <ListItemIcon>\r\n                                        {song.favor\r\n                                            ? <FavoriteIcon/>\r\n                                            : <FavoriteBorderIcon/>}\r\n\r\n                                    </ListItemIcon>\r\n\r\n                                    <ListItemText\r\n                                        primary={song.name}\r\n                                    />\r\n\r\n                                </ListItem>\r\n\r\n                            )\r\n                        },\r\n                    )}\r\n                    {/*</FixedSizeList>*/}\r\n                </List>\r\n\r\n            </div>\r\n        </Container>)\r\n}\r\n\r\n\r\nexport default SongList\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {setTerm} from '../../../redux/song-reducer'\r\nimport {getSongsListThunk, toogleFavorThunk} from '../../../redux/thunks'\r\nimport SongList from \"./SongList\";\r\nimport {createSelector} from 'reselect'\r\n\r\nconst getSongs = (state: any) => state.songReducer.songs\r\nconst getTerm = (state: any) => state.songReducer.term\r\nconst getOnlyFavor = (state: any) => state.songReducer.getOnlyFavor\r\n\r\nconst filtredSongsSelector = createSelector(\r\n    [getSongs, getTerm, getOnlyFavor],\r\n    (songs, term, getOnlyFavor) => {\r\n        let filteredSongs = songs.filter((item: any) => item.name.includes(term))\r\n\r\n        if (getOnlyFavor) {\r\n            filteredSongs = songs.filter((item: any) => item.favor)\r\n        }\r\n\r\n        const cyrillic = (a: any) => 10 > a ? 2e4 + +a : a.charCodeAt(0);\r\n        return filteredSongs.sort((a: any, b: any) => cyrillic(a.name) - cyrillic(b.name))\r\n    }\r\n)\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        songs: filtredSongsSelector(state),\r\n        term: getTerm(state),\r\n        isLoading: state.songReducer.isLoading,\r\n        getOnlyFavor: state.songReducer.getOnlyFavor,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getSongsListThunk, setTerm, toogleFavorThunk})(SongList)\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport appReducer from './app-reducer'\r\nimport reducer from './song-reducer'\r\nimport { createLogger } from 'redux-logger'\r\n//\r\nconst logger = createLogger({\r\n    // collapsed: () => (true),\r\n    // predicate: (getState, action) => !action.type.includes('@@redux-form'),\r\n    level: 'log',\r\n});\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger]\r\n\r\nconst store = configureStore(\r\n    {\r\n        reducer: {songReducer: reducer, app: appReducer},\r\n        middleware\r\n    }\r\n)\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst Copyright = () => (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n            Your Website\r\n        </Link>{' '}\r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n    </Typography>\r\n)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nconst SignIn = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\nexport default SignIn\r\n","import CssBaseline from \"@material-ui/core/CssBaseline\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport React from \"react\"\nimport {connect, Provider} from \"react-redux\"\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport {compose} from \"redux\"\nimport ErrorPage from \"./components/ErrorPage/ErrorPage\"\nimport {Main} from \"./components/Info/Main\"\nimport ListContainer from \"./components/List/ListContainer\"\nimport SearchAppBar from \"./components/SearchAppBar/SearchAppBar\"\nimport SongContainer from \"./components/Songs/Song/SongContainer\"\nimport SongsListContainer from \"./components/Songs/SongList/SongsListContainer\"\nimport {initializeApp} from \"./redux/app-reducer\"\nimport store from \"./redux/store\"\nimport SignIn from \"./SignIn/SignIn\"\n\n\n// type PropsType = {\n//     initialized: boolean\n//     initializeApp: () => void\n//     onSetSidebarOpen: () => void\n// }\n\nclass App extends React.Component {\n// class App extends React.Component<PropsType, StateType > {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n\n        if (this.props.error){\n            return <ErrorPage error={this.props.error} />\n        }\n\n        if (!this.props.initialized) {\n            return <LinearProgress />\n        }\n\n        const routes = (\n            <Switch>\n                <Route path='/cards/' exact render={() => <SongsListContainer/>}/>\n                <Route path='/lists/' exact render={() => <ListContainer/>}/>\n                <Route path='/sign/' exact render={() => <SignIn/>}/>\n                <Route path='/card/:id' component={SongContainer}/>\n                <Route exact component={Main}/>\n            </Switch>\n        )\n\n        return (\n            // <Layout>\n            <>\n                <CssBaseline />\n                {/*<TemporaryDrawer/>*/}\n                <SearchAppBar/>\n                {routes}\n\n            </>\n            // </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        initialized: state.app.initialized,\n        error: state.app.error\n    }\n}\n\nconst AppContainer = compose(\n    // withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst RandomCardsApp = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n\n}\nexport default RandomCardsApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomCardsApp from './App'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RandomCardsApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}