{"version":3,"sources":["components/ErrorPage/ErrorPage.js","components/Info/Main.js","components/Spinner/Spinner.js","components/List/List.tsx","components/List/ListContainer.tsx","redux/song-reducer.ts","api/api.js","redux/app-reducer.ts","redux/thunks.ts","components/SearchAppBar/SidebarDrawer.js","components/SearchAppBar/SearchAppBar.js","constants/constants.js","common/history.js","components/Song/NewSongForm.js","components/Song/SongButtons.js","components/Song/SongTitle.js","components/Song/Song.tsx","common/nl2br.js","components/Song/SongContainer.tsx","components/SongList/SongList.js","components/SongList/SongsListContainer.tsx","redux/store.ts","SignIn/SignIn.js","App.js","serviceWorker.js","index.js"],"names":["ErrorPage","error","Typography","variant","Main","Container","maxWidth","Spinner","LinearProgress","SongList","props","isLoading","connect","state","lists","List","songsSlice","createSlice","name","initialState","songs","currentSongId","lastSongIndex","currentSongData","favor","hide","getOnlyFavor","term","fontSize","editMode","reducers","setSongId","action","payload","setLastSongIndex","setSongData","toogleGetOnlyFavor","setSongsList","setTerm","setFontSize","setEditMode","setLoadingOn","setLoadingOff","toogleHide","toogleFavor","map","song","_id","actions","reducer","baseURL","instance","axios","headers","SongAPI","get","songId","post","content","delete","data","appSlice","initialized","initializedSuccess","setError","getSongsListThunk","dispatch","getState","a","songReducer","response","console","toString","toogleFavorThunk","deleteSongThunk","history","filter","push","useStyles","makeStyles","theme","createStyles","list","width","drawer","breakpoints","up","flexShrink","SidebarDrawer","handleDrawerClose","open","classes","Drawer","className","anchor","onClose","paper","drawerPaper","role","onClick","onKeyDown","Avatar","Divider","ListItem","button","component","Link","to","ListItemIcon","ListItemText","primary","root","flexGrow","menuButton","marginRight","spacing","title","display","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","toogleGetOnlyFavorUpdateList","React","useState","setOpen","AppBar","Toolbar","IconButton","edge","aria-label","noWrap","Button","RouterLink","style","Switch","checked","checkedIcon","icon","onChange","InputBase","value","ev","currentTarget","placeholder","input","inputProps","createBrowserHistory","addSongThunk","responce","initialValues","validate","values","log","errors","text","onSubmit","setSubmitting","submitForm","isSubmitting","touched","handleBlur","handleChange","TextField","margin","required","fullWidth","id","label","onBlur","CheckboxWithLabel","type","Label","rows","window","innerHeight","multiline","disabled","flexDirection","flexWrap","fab","bottom","right","floatButtonBlock","top","zIndex","FloatButtonBlock","Box","shuffle","e","changefontSize","toogleEditMode","SongTitle","Date","time_last_seen","toLocaleDateString","confirm","toogleHideThunk","editable","fontFace","Song","contentEditable","createRef","str","isXhtml","songContent","replace","preventDefault","getSongByRandomThunk","inc","current","setSongContentThunk","replaceMode","replaceStr","br2nl","innerText","Paper","elevation","html","innerRef","spellCheck","SongContainer","prevProps","this","match","params","getSongByIdThunk","index","Component","length","item","Math","floor","random","status","listContainer","VirtualizedListItem","key","ContainerProps","ContainerComponent","ListItemSecondaryAction","alert","WindowsList","listRef","scrollToItem","parseInt","ref","itemData","itemCount","overscanCount","itemSize","initialScrollOffset","styles","Fab","NavLink","getTerm","filtredSongsSelector","createSelector","filteredSongs","includes","cyrillic","charCodeAt","sort","b","logger","createLogger","level","middleware","getDefaultMiddleware","store","configureStore","app","appReducer","Copyright","align","href","getFullYear","marginTop","avatar","secondary","main","form","submit","SignIn","CssBaseline","noValidate","autoComplete","autoFocus","FormControlLabel","control","Checkbox","Grid","container","xs","mt","App","initializeApp","routes","path","exact","render","SongsListContainer","ListContainer","AppContainer","compose","RandomCardsApp","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.24c30aaa.chunk.js","sourcesContent":["import Typography from \"@material-ui/core/Typography\"\r\nimport React from \"react\"\r\n\r\nconst ErrorPage = ({error}) => {\r\n    return <Typography variant={'h1'}>\r\n        {error}\r\n    </Typography>\r\n}\r\n\r\nexport default ErrorPage\r\n","import Container from \"@material-ui/core/Container\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport React from \"react\"\r\n// import Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nexport const Main = () => (\r\n\r\n    <>\r\n        {/*<CssBaseline/>*/}\r\n        <Container maxWidth=\"lg\">\r\n            <div>\r\n                <h1>Random cards</h1>\r\n                <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A ab, amet aperiam doloremque ducimus\r\n                    eaque,\r\n                    enim, et facilis neque optio provident quam quas quod rem repellat rerum sequi sit suscipit.\r\n                </div>\r\n                <div>Accusamus alias architecto, aut cupiditate doloremque eveniet fugiat impedit in molestias nihil\r\n                    odio\r\n                    officiis porro, quo reiciendis rem tempora voluptates. Autem cum, error esse facere modi officiis\r\n                    quibusdam\r\n                    quisquam unde.\r\n                </div>\r\n                <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto beatae corporis culpa eum\r\n                    excepturi\r\n                    explicabo impedit iure minima minus molestiae nulla odit possimus quas, rem saepe soluta suscipit\r\n                    temporibus\r\n                    voluptas?\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    </>\r\n\r\n)\r\n","import CircularProgress from \"@material-ui/core/CircularProgress\"\r\nimport Container from '@material-ui/core/Container'\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\r\nimport React from 'react'\r\n\r\nconst Spinner = () => {\r\n    // return <CircularProgress />\r\n\r\n    return <Container>\r\n        <LinearProgress />\r\n    </Container>\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport { ListType } from '../../constants/types';\r\nimport Spinner from \"../Spinner/Spinner\"\r\n\r\nexport function SongList(props: any): any {\r\n\r\n    if (props.isLoading) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    // return <>\r\n    //     <h1>My lists</h1>\r\n    //     <ListGroup>\r\n    //         {props.lists.map((list: ListType) =>\r\n    //             <ListGroup.Item action key={list._id}>\r\n    //                 {list.name}\r\n    //             </ListGroup.Item>\r\n    //         )}\r\n    //     </ListGroup>\r\n    // </>\r\n}\r\n\r\n\r\nexport default SongList\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport List from \"./List\";\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        lists: state.lists,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(List)\r\n","import {createSlice} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    songs: [] as Array<SongType>,\r\n    currentSongId: null,\r\n    lastSongIndex: 0,\r\n    currentSongData: {\r\n        favor: false, hide: false\r\n    },\r\n    isLoading: false,\r\n    getOnlyFavor: false,\r\n    term: '',\r\n    fontSize: 14,\r\n    editMode: false\r\n}\r\ntype SongType = {\r\n    _id: string\r\n    name: string\r\n    favor: boolean\r\n    hide: boolean\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nconst songsSlice = createSlice({\r\n        name: 'songs',\r\n        initialState,\r\n        reducers: {\r\n            setSongId: (state, action) => {\r\n                state.currentSongId = action.payload\r\n            },\r\n            setLastSongIndex: (state, action) => {\r\n                state.lastSongIndex = action.payload\r\n            },\r\n            setSongData: (state, action) => {\r\n                state.currentSongData = action.payload\r\n            },\r\n            toogleGetOnlyFavor: (state) => {\r\n                state.getOnlyFavor = !state.getOnlyFavor\r\n            },\r\n            setSongsList: (state, action) => {\r\n                state.songs = action.payload\r\n            },\r\n            setTerm: (state, action) => {\r\n                state.term = action.payload\r\n            },\r\n            setFontSize: (state, action) => {\r\n                state.fontSize = action.payload\r\n            },\r\n            setEditMode: (state, action) => {\r\n                state.editMode = action.payload\r\n            },\r\n            setLoadingOn: (state) => {\r\n                state.isLoading = true\r\n            },\r\n            setLoadingOff: (state) => {\r\n                state.isLoading = false\r\n            },\r\n            toogleHide: (state, action) => {\r\n                if (state.currentSongData) {\r\n                    state.currentSongData.hide = !state.currentSongData.hide\r\n                }\r\n            },\r\n            toogleFavor: (state, action) => {\r\n                if (state.currentSongData) {\r\n                    state.currentSongData.favor = !state.currentSongData.favor\r\n                }\r\n                state.songs.map((song: SongType) => {\r\n                    if (song._id === action.payload) {\r\n                        song.favor = !song.favor\r\n                    }\r\n                    return song\r\n                })\r\n            },\r\n        }\r\n    }\r\n)\r\n\r\nconst {actions, reducer} = songsSlice\r\n\r\nexport const {\r\n    setSongId,\r\n    setSongData,\r\n    toogleGetOnlyFavor,\r\n    setSongsList,\r\n    setTerm,\r\n    toogleFavor,\r\n    setLoadingOff,\r\n    setLoadingOn,\r\n    setEditMode,\r\n    setFontSize,\r\n    toogleHide,\r\n    setLastSongIndex\r\n} = actions\r\n\r\nexport default reducer\r\n","import * as axios from 'axios'\n\nlet baseURL = ''\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    baseURL = 'http://localhost:5000/api/v1/'\n    // baseURL = 'https://random-cards-server.herokuapp.com/api/v1/'\n} else {\n    // baseURL = 'http://37.228.117.161:5000/api/v1/'\n    // baseURL = 'http://192.168.0.100:5000/api/v1/'\n    // baseURL = 'http://localhost:5000/api/v1/'\n    baseURL = 'https://random-cards-server.herokuapp.com/api/v1/'\n}\n\nconst instance = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n    },\n})\n\nexport const SongAPI = {\n\n    getSongsList(getOnlyFavor) {\n        return instance.get('/cards?limit=999' + (getOnlyFavor ? '&favor=true' : ''))\n        // return instance.get('/cards', {favor: false, name: ''})\n    },\n    getSong(songId) {\n        return instance.get('/cards?id=' + songId)\n    },\n    getSongRandom() {\n        return instance.get('/cards?random=true&limit=1')\n    },\n    setFavor(songId, favor) {\n        const result = instance.post('/cards', {_id: songId, favor: favor})\n        return result\n    },\n    setHide(songId, hide) {\n        const result = instance.post('/cards', {_id: songId, hide: hide})\n        return result\n    },\n    setContent(songId, content) {\n        return instance.post('/cards', {_id: songId, content: content})\n    },\n    addSong(name, content, favor) {\n        return instance.post('/cards/add', {name: name, content: content, favor: favor})\n    },\n    deleteSong(songId) {\n        return instance.delete('/cards', {data: {_id: songId}})\n    }\n}\n\n","import {createSlice} from '@reduxjs/toolkit'\r\nimport {getSongsListThunk} from './thunks'\r\nimport {Dispatch} from \"redux\"\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n    error: ''\r\n};\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        initializedSuccess: (state) => {\r\n            state.initialized = true\r\n        },\r\n        setError: (state, action)=>{\r\n            state.error = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nconst {actions, reducer} = appSlice\r\nexport const {initializedSuccess, setError} = actions\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    dispatch(getSongsListThunk());\r\n    dispatch(initializedSuccess());\r\n}\r\n\r\n\r\nexport default reducer;\r\n","import {SongAPI} from '../api/api'\r\nimport {setLoadingOff, setLoadingOn, setSongData, setSongId, setSongsList, toogleFavor, toogleGetOnlyFavor, toogleHide, setLastSongIndex} from './song-reducer'\r\nimport {setError} from './app-reducer'\r\nimport {SongType} from \"../constants/types\"\r\n\r\nexport const getSongsListThunk = () => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const getOnlyFavor = getState().songReducer.getOnlyFavor\r\n    try {\r\n        const response = await SongAPI.getSongsList(getOnlyFavor)\r\n        dispatch(setSongsList(response.data))\r\n    } catch (e) {\r\n        console.error(e)\r\n        dispatch(setError(e.toString()))\r\n    }\r\n\r\n    dispatch(setLoadingOff())\r\n\r\n}\r\n\r\nexport const getSongByIdThunk = (songId: number, index: number) => async (dispatch: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.getSong(songId)\r\n    if (response.data.length === 1) {\r\n        dispatch(setLoadingOff())\r\n        dispatch(setSongData(response.data[0]))\r\n        dispatch(setLastSongIndex(index))\r\n    }\r\n}\r\n\r\nexport const getSongByRandomThunk = (history: any) => (dispatch: any, getState: any) => {\r\n    const state = getState().songReducer\r\n    let songs = state.songs\r\n    if (state.getOnlyFavor) {\r\n        songs = state.songs.filter((item: SongType) => item.favor)\r\n    }\r\n    const song = songs[Math.floor(Math.random() * songs.length)];\r\n    dispatch(setSongId(song._id))\r\n    history.push('/card/' + song._id)\r\n}\r\n\r\nexport const toogleFavorThunk = (songId: number, favor: boolean) => async (dispatch: any) => {\r\n    await SongAPI.setFavor(songId, !favor)\r\n    dispatch(toogleFavor(songId))\r\n}\r\n\r\nexport const setSongContentThunk = (songId: number, content: string) => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.setContent(songId, content)\r\n    if (response.status === 202) {\r\n        dispatch(setLoadingOff())\r\n        dispatch(setSongData({...getState().songReducer.currentSongData, content: content}))\r\n    }\r\n}\r\nexport const toogleGetOnlyFavorUpdateList = (songId: number, favor: boolean) => (dispatch: any, getState: any) => {\r\n    dispatch(toogleGetOnlyFavor())\r\n    if (getState().songReducer.getOnlyFavor){\r\n        dispatch(setSongsList(getState().songReducer.songs.filter((song: SongType) => song.favor)))\r\n    }\r\n}\r\n\r\nexport const toogleHideThunk = (songId: number, hide: boolean) => async (dispatch: any) => {\r\n    await SongAPI.setHide(songId, !hide)\r\n    dispatch(toogleHide(songId))\r\n}\r\n\r\nexport const addSongThunk = (history: any, name: string, content: string, favor: boolean) => async (dispatch: any) => {\r\n    dispatch(setLoadingOn())\r\n    const responce = await SongAPI.addSong(name, content, favor)\r\n    history.push('/card/' + responce.data)\r\n    dispatch(setLoadingOff())\r\n}\r\n\r\nexport const deleteSongThunk = (songId: number, history: any) => async (dispatch: any, getState: any) => {\r\n    dispatch(setLoadingOn())\r\n    const response = await SongAPI.deleteSong(songId)\r\n    const songs = getState().songReducer.songs\r\n    dispatch(setSongsList(songs.filter((song: any) => song._id != songId)))\r\n    dispatch(setLoadingOff())\r\n    history.push('/cards')\r\n}\r\n\r\n","import Avatar from \"@material-ui/core/Avatar\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport Drawer from \"@material-ui/core/Drawer\"\r\nimport List from \"@material-ui/core/List\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport {createStyles, makeStyles} from \"@material-ui/core/styles\"\r\nimport React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst useStyles = makeStyles(theme =>\r\n    createStyles({\r\n        list: {\r\n            width: 250,\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                width: 240,\r\n                flexShrink: 0,\r\n            },\r\n        },\r\n    }))\r\n\r\nconst SidebarDrawer = ({handleDrawerClose, open}) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"temporary\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            onClose={handleDrawerClose}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <div\r\n                className={classes.list}\r\n                role=\"presentation\"\r\n                onClick={handleDrawerClose}\r\n                onKeyDown={handleDrawerClose}\r\n            >\r\n                <List>\r\n                    <Avatar>Sergey</Avatar>\r\n\r\n                    <Divider />\r\n\r\n                    {/*<ListItem button component={Link} to={'/lists'}>*/}\r\n                    {/*    <ListItemIcon />*/}\r\n                    {/*    <ListItemText primary={\"All list\"}/>*/}\r\n                    {/*</ListItem>*/}\r\n\r\n                    <ListItem button component={Link} to={'/cards'}>\r\n                        <ListItemIcon />\r\n                        <ListItemText primary={\"All songs\"}/>\r\n                    </ListItem>\r\n\r\n                    <Divider />\r\n\r\n                    <ListItem button component={Link} to={'/sign/'}>\r\n                        <ListItemText primary={\"Logout\"}/>\r\n                    </ListItem>\r\n\r\n                </List>\r\n            </div>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default SidebarDrawer\r\n","import AppBar from \"@material-ui/core/AppBar\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Container from '@material-ui/core/Container'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport InputBase from \"@material-ui/core/InputBase\"\r\nimport {fade, makeStyles} from \"@material-ui/core/styles\"\r\nimport Switch from \"@material-ui/core/Switch\"\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport React, {useState} from \"react\"\r\nimport {connect} from \"react-redux\"\r\nimport {Link as RouterLink} from \"react-router-dom\"\r\nimport {APP_HEADER} from \"../../constants/constants\"\r\nimport {setSongsList, setTerm, toogleGetOnlyFavor} from \"../../redux/song-reducer\"\r\nimport {toogleGetOnlyFavorUpdateList} from \"../../redux/thunks\"\r\nimport SidebarDrawer from \"./SidebarDrawer\"\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            display: \"block\",\r\n        },\r\n    },\r\n    search: {\r\n        position: \"relative\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        \"&:hover\": {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: \"70%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: \"auto\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: \"100%\",\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"12ch\",\r\n            \"&:focus\": {\r\n                width: \"20ch\",\r\n            },\r\n        },\r\n    },\r\n}))\r\n\r\nconst top100Films = [\r\n    {title: 'The Shawshank Redemption', year: 1994},\r\n    {title: 'The Godfather', year: 1972},\r\n    {title: 'The Godfather: Part II', year: 1974},\r\n    {title: 'The Dark Knight', year: 2008},\r\n    {title: '12 Angry Men', year: 1957},]\r\n\r\nconst SearchAppBar = props => {\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"sticky\">\r\n\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        <Button component={RouterLink} to=\"/\" style={{color: \"white\"}}>\r\n                            {APP_HEADER}\r\n                        </Button>\r\n                    </Typography>\r\n\r\n                    <Switch\r\n                        checked={props.getOnlyFavor}\r\n                        checkedIcon={<FavoriteIcon/>}\r\n                        icon={<FavoriteBorderIcon/>}\r\n                        onChange={() => props.toogleGetOnlyFavor()}\r\n                    />\r\n\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon/>\r\n                        </div>\r\n                        <InputBase\r\n                            value={props.term}\r\n                            onChange={(ev)=>props.setTerm(ev.currentTarget.value)}\r\n                            placeholder=\"Search…\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            inputProps={{\"aria-label\": \"search\"}}\r\n                        />\r\n                    </div>\r\n\r\n                    {/*<div className={classes.search} style={{color: \"white\"}}>*/}\r\n                    {/*    <Highlights/>*/}\r\n                    {/*</div>*/}\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <SidebarDrawer\r\n                handleDrawerClose={handleDrawerClose}\r\n                open={open}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Highlights = () => (\r\n    <Autocomplete\r\n        id=\"highlights-demo\"\r\n        style={{width: 300}}\r\n        options={top100Films}\r\n        getOptionLabel={(option) => option.title}\r\n        renderInput={(params) => (\r\n            <TextField {...params} label=\"Highlights\" variant=\"outlined\" margin=\"normal\"/>\r\n        )}\r\n        renderOption={(option, {inputValue}) => {\r\n            const matches = match(option.title, inputValue);\r\n            const parts = parse(option.title, matches);\r\n\r\n            return (\r\n                <div>\r\n                    {parts.map((part, index) => (\r\n                        <span key={index} style={{fontWeight: part.highlight ? 700 : 400}}>\r\n                {part.text}\r\n              </span>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }}\r\n    />\r\n)\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        getOnlyFavor: state.songReducer.getOnlyFavor,\r\n        term: state.songReducer.term\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        toogleGetOnlyFavor,\r\n        toogleGetOnlyFavorUpdateList,\r\n        setTerm\r\n    })(SearchAppBar)\r\n{/*<Tooltip title=\"All cards\">*/\r\n}\r\n{/*    <IconButton*/\r\n}\r\n{/*        component={NavLink}*/\r\n}\r\n{/*        to={\"/cards/\"}*/\r\n}\r\n{/*        style={{color: \"white\"}}>*/\r\n}\r\n{/*        <FormatListNumberedOutlinedIcon/>*/\r\n}\r\n{/*    </IconButton>*/\r\n}\r\n{/*</Tooltip>*/\r\n}\r\n","export const APP_HEADER = 'Random Cards'\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n","import * as React from 'react'\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik'\r\nimport {Button, LinearProgress} from '@material-ui/core'\r\nimport {TextField} from 'formik-material-ui'\r\nimport {CheckboxWithLabel} from 'formik-material-ui';\r\nimport {connect} from 'react-redux'\r\nimport {addSongThunk} from '../../redux/thunks'\r\nimport history from '../../common/history';\r\n\r\nconst NewSongForm = (props) => (\r\n\r\n    <Formik\r\n        initialValues={{\r\n            name: '',\r\n            content: '',\r\n            favor: false\r\n        }}\r\n        validate={(values) => {\r\n            console.log('validate')\r\n            const errors = {}\r\n            if (!values.name) {\r\n                errors.name = 'Enter song name'\r\n            }\r\n            if (!values.content) {\r\n                errors.text = 'Enter song text'\r\n            }\r\n            return errors\r\n        }}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            props.addSongThunk(history, values.name, values.content, false)\r\n            setSubmitting(false)\r\n                // console.log(JSON.stringify(values, null, 2))\r\n        }}>\r\n        {({submitForm, isSubmitting, errors, touched, handleBlur, values, handleChange}) => (\r\n            <Form>\r\n                <Field\r\n                    component={TextField}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"name\"\r\n                    label=\"Song name\"\r\n                    name=\"name\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    value={values.name}\r\n                />\r\n\r\n                <ErrorMessage name=\"name\"/>\r\n\r\n                <Field\r\n                    component={CheckboxWithLabel}\r\n                    name=\"favor\"\r\n                    type={'checkbox'}\r\n                    Label={{label: 'Add to favor?'}}\r\n                />;\r\n\r\n                <Field\r\n                    component={TextField}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    fullWidth\r\n                    rows={window.innerHeight / 50}\r\n                    id=\"content\"\r\n                    label=\"Song text\"\r\n                    name=\"content\"\r\n                    multiline\r\n                    onChange={handleChange}\r\n                />\r\n                {touched.text && errors.text\r\n                    ? <div>{errors.text}</div>\r\n                    : null}\r\n                <br/>\r\n\r\n\r\n                {isSubmitting && <LinearProgress/>}\r\n\r\n                <br/>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={isSubmitting}\r\n                    onClick={submitForm}>\r\n                    Save\r\n                </Button>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n)\r\n\r\nexport default connect(null, {addSongThunk})(NewSongForm)\r\n","import {Box, IconButton} from '@material-ui/core'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport LoopIcon from '@material-ui/icons/Loop'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn'\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            flexWrap: 'nowrap'\r\n\r\n        },\r\n        fab: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(5),\r\n            right: theme.spacing(5),\r\n        },\r\n        floatButtonBlock: {\r\n            color: 'black',\r\n            position: 'absolute',\r\n            right: '10px',\r\n            top: '100px',\r\n            zIndex: 100,\r\n            '& Button': {\r\n                display: 'block'\r\n            }\r\n        },\r\n\r\n    }),\r\n);\r\n\r\nexport const FloatButtonBlock = (props) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Box className={classes.floatButtonBlock}>\r\n            <IconButton onClick={(ev) => props.shuffle(ev)}>\r\n                <LoopIcon/>\r\n            </IconButton>\r\n            <IconButton onClick={(e) => props.changefontSize(e, 1)}>\r\n                <ZoomInIcon/>\r\n            </IconButton>\r\n            <IconButton onClick={(e) => props.changefontSize(e, -1)}>\r\n                <ZoomOutIcon/>\r\n            </IconButton>\r\n            <IconButton>\r\n                {!props.editMode\r\n                    ? <EditIcon onClick={props.toogleEditMode}/>\r\n                    : <SaveIcon onClick={props.toogleEditMode}/>\r\n                }\r\n            </IconButton>\r\n\r\n        </Box>\r\n    )\r\n}\r\n","import {Container, IconButton, Typography} from '@material-ui/core'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\r\nimport React from 'react'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport history from '../../common/history'\r\n\r\nexport const SongTitle = (props) => {\r\n\r\n    const deleteSongHandler = () =>{\r\n        const isDelete = window.confirm('Delete this song?')\r\n        if (isDelete){\r\n            props.deleteSongThunk(props.currentSongData._id, history)\r\n        }\r\n    }\r\n\r\n    return <Container>\r\n        <Typography variant={'h6'} noWrap>\r\n            {props.currentSongData.name + (props.editMode ? ' (редактирование)' : '')}\r\n        </Typography>\r\n        <Typography variant={'caption'}>\r\n            {`last seen: ${new Date(props.currentSongData.time_last_seen).toLocaleDateString()}`}\r\n        </Typography>\r\n\r\n        <IconButton\r\n            onClick={() => props.toogleFavorThunk(props.currentSongData._id, props.currentSongData.favor)}>\r\n\r\n            {props.currentSongData.favor\r\n                ? <FavoriteIcon/>\r\n                : <FavoriteBorderIcon/>}\r\n\r\n        </IconButton>\r\n\r\n        <IconButton onClick={deleteSongHandler}>\r\n            <DeleteIcon />\r\n        </IconButton>\r\n\r\n        <IconButton\r\n            onClick={() => props.toogleHideThunk(props.currentSongData._id, props.currentSongData.hide)}>\r\n            <HighlightOffIcon />\r\n        </IconButton>\r\n\r\n    </Container>\r\n}\r\n","import React from 'react'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport {br2nl, nl2br} from '../../common/nl2br'\r\nimport Spinner from '../Spinner/Spinner';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Paper} from \"@material-ui/core\"\r\nimport {FloatButtonBlock} from './SongButtons';\r\nimport {SongTitle} from './SongTitle';\r\nimport {deleteSongThunk} from \"../../redux/thunks\"\r\n\r\n\r\nexport type SongPropsType = {\r\n    getSongByRandomThunk: (history: any) => void\r\n    history: any\r\n    currentSongData: any\r\n    isLoading: boolean\r\n    fontSize: number\r\n    editMode: boolean\r\n    setFontSize: (size: number) => void\r\n    toogleFavorThunk: (id: number, favor: boolean) => void\r\n    toogleHideThunk: (id: number, hide: boolean) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    setSongContentThunk: (id: number, sanitizedHtml: string) => void\r\n    deleteSongThunk: (id: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            flexWrap: 'nowrap'\r\n\r\n        },\r\n        fab: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(5),\r\n            right: theme.spacing(5),\r\n        },\r\n        floatButtonBlock: {\r\n            color: 'black',\r\n            position: 'absolute',\r\n            right: '10px',\r\n            top: '100px',\r\n            zIndex: 100,\r\n            '& Button': {\r\n                display: 'block'\r\n            }\r\n        },\r\n        editable: {\r\n            fontSize: (props: SongPropsType) => props.fontSize,\r\n            padding: 10,\r\n            fontFace: 'Roboto',\r\n            // height: '100%'\r\n        }\r\n\r\n\r\n    }),\r\n);\r\n\r\n\r\nconst Song: React.FunctionComponent<SongPropsType> = (props: SongPropsType) => {\r\n\r\n    const classes = useStyles(props);\r\n    const contentEditable: React.RefObject<HTMLInputElement> = React.createRef();\r\n\r\n    if (props.isLoading || !props.currentSongData) {\r\n        return <Spinner/>\r\n    }\r\n\r\n    const songContent = nl2br(props.currentSongData.content)\r\n\r\n    const shuffle = (e: any) => {\r\n        e.preventDefault()\r\n        if (props.editMode) {\r\n            props.setEditMode(false)\r\n        }\r\n        props.getSongByRandomThunk(props.history)\r\n    }\r\n\r\n    const changefontSize = (e: any, inc: number) => {\r\n        props.setFontSize(props.fontSize + inc)\r\n    }\r\n\r\n    const toogleEditMode = () => {\r\n        props.setEditMode(!props.editMode)\r\n        if (props.editMode && contentEditable.current) {\r\n            props.setSongContentThunk(props.currentSongData._id, br2nl(contentEditable.current.innerText))\r\n            props.setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FloatButtonBlock\r\n                shuffle={shuffle}\r\n                changefontSize={changefontSize}\r\n                toogleEditMode={toogleEditMode}\r\n                editMode={props.editMode}/>\r\n\r\n            <SongTitle\r\n                currentSongData={props.currentSongData}\r\n                editMode={props.editMode}\r\n                toogleFavorThunk={props.toogleFavorThunk}\r\n                toogleHideThunk={props.toogleHideThunk}\r\n                deleteSongThunk={props.deleteSongThunk}\r\n            />\r\n\r\n            <Paper elevation={3}>\r\n                <ContentEditable\r\n                    html={songContent}\r\n                    innerRef={contentEditable}\r\n                    disabled={!props.editMode}\r\n                    spellCheck={'false'}\r\n                    onChange={() => null}\r\n                    className={classes.editable}\r\n                />\r\n            </Paper>\r\n\r\n        </>)\r\n\r\n}\r\n\r\nexport default Song\r\n","export const nl2br = (str, isXhtml) => {\r\n    // Some latest browsers when str is null return and unexpected null value\r\n    if (typeof str === 'undefined' || str === null) {\r\n        return ''\r\n    }\r\n\r\n    // Adjust comment to avoid issue on locutus.io display\r\n    const breakTag = (isXhtml || typeof isXhtml === 'undefined') ? '<br ' + '/>' : '<br>'\r\n\r\n    return (str + '')\r\n        .replace(/(\\r\\n|\\n\\r|\\r|\\n)/g, breakTag + '$1')\r\n}\r\n\r\n/**\r\n * This function inverses text from PHP's nl2br() with default parameters.\r\n *\r\n * @param {string} str Input text\r\n * @param {boolean} replaceMode Use replace instead of insert\r\n * @return {string} Filtered text\r\n */\r\nexport function br2nl (str, replaceMode = true) {\r\n\r\n    if (typeof str === 'undefined' || str === null) {\r\n        return ''\r\n    }\r\n    const replaceStr = (replaceMode) ? \"\\n\" : '';\r\n    // Includes <br>, <BR>, <br />, </br>\r\n    // eslint-disable-next-line no-useless-escape\r\n    return str.replace(/<\\s*\\/?br\\s*[\\/]?>/gi, replaceStr);\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {compose} from 'redux'\r\nimport {setEditMode, setFontSize} from '../../redux/song-reducer'\r\nimport {setLastSongIndex} from '../../redux/song-reducer'\r\nimport {\r\n    deleteSongThunk,\r\n    getSongByIdThunk,\r\n    getSongByRandomThunk,\r\n    setSongContentThunk,\r\n    toogleFavorThunk,\r\n    toogleHideThunk\r\n} from '../../redux/thunks'\r\nimport Song, {SongPropsType} from './Song'\r\n\r\ntype PathParamsType = {\r\n    id: string\r\n    index: string\r\n}\r\n\r\ntype OwnPropsTypes = {\r\n    getSongByIdThunk: (id: string, index: string) => void\r\n}\r\n\r\ntype SongContainerPropsType = RouteComponentProps<PathParamsType> & SongPropsType & OwnPropsTypes\r\n\r\nclass SongContainer extends React.Component<SongContainerPropsType> {\r\n\r\n    componentDidUpdate(prevProps: SongContainerPropsType) {\r\n        if (this.props.match.params.id !== prevProps.match.params.id) {\r\n            this.props.getSongByIdThunk(this.props.match.params.id, this.props.match.params.index)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getSongByIdThunk(this.props.match.params.id, this.props.match.params.index)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Song\r\n                    history={this.props.history}\r\n                    currentSongData={this.props.currentSongData}\r\n                    toogleFavorThunk={this.props.toogleFavorThunk}\r\n                    toogleHideThunk={this.props.toogleHideThunk}\r\n                    getSongByRandomThunk={this.props.getSongByRandomThunk}\r\n                    fontSize={this.props.fontSize}\r\n                    setFontSize={this.props.setFontSize}\r\n                    editMode={this.props.editMode}\r\n                    setEditMode={this.props.setEditMode}\r\n                    setSongContentThunk={this.props.setSongContentThunk}\r\n                    isLoading={this.props.isLoading}\r\n                    deleteSongThunk={this.props.deleteSongThunk}\r\n                />\r\n            </div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        currentSongData: state.songReducer.currentSongData,\r\n        isLoading: state.songReducer.isLoading,\r\n        fontSize: state.songReducer.fontSize,\r\n        editMode: state.songReducer.editMode\r\n    }\r\n}\r\n\r\nexport default connect<ReturnType<typeof mapStateToProps>>(mapStateToProps, {\r\n    getSongByIdThunk,\r\n    getSongByRandomThunk,\r\n    toogleFavorThunk,\r\n    setEditMode,\r\n    toogleHideThunk,\r\n    setSongContentThunk,\r\n    setFontSize,\r\n    setLastSongIndex,\r\n    deleteSongThunk\r\n})(SongContainer)\r\n\r\n","import Button from '@material-ui/core/Button'\r\nimport Container from \"@material-ui/core/Container\"\r\nimport Fab from '@material-ui/core/Fab'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\"\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\"\r\nimport React from \"react\"\r\nimport {Link, NavLink} from \"react-router-dom\"\r\nimport Spinner from \"../Spinner/Spinner\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {FixedSizeList} from \"react-window\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport history from '../../common/history'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {},\r\n    fab: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(5),\r\n        right: theme.spacing(4),\r\n    },\r\n    listContainer: {\r\n        // backgroundColor: 'red',\r\n        height: '85vh'\r\n    }\r\n}))\r\n\r\n\r\nconst VirtualizedListItem = ({index, style, data}) => {\r\n    // https://github.com/mui-org/material-ui/issues/16026\r\n\r\n    const song = data[index]\r\n\r\n    return <ListItem\r\n        key={index}\r\n        button\r\n        ContainerProps={{style: style}}\r\n        ContainerComponent=\"div\"\r\n    >\r\n        <ListItemIcon>\r\n            {song.favor\r\n                ? <FavoriteIcon/>\r\n                : <FavoriteBorderIcon/>}\r\n\r\n        </ListItemIcon>\r\n\r\n        <ListItemText component={Link} to={\"/card/\" + song._id}\r\n                      primary={song.name}\r\n                      onClick={() => history.push(\"/card/\" + song._id + '/' + index)}\r\n        />\r\n\r\n        <ListItemSecondaryAction onClick={()=>alert('!')}>\r\n            <IconButton edge=\"end\" aria-label=\"delete\">\r\n                <DeleteIcon/>\r\n            </IconButton>\r\n        </ListItemSecondaryAction>\r\n\r\n    </ListItem>\r\n}\r\n\r\nconst WindowsList = (props) => {\r\n\r\n    const listRef = React.createRef();\r\n\r\n    const offset = () =>{\r\n        alert(props.lastSongIndex)\r\n        listRef.current.scrollToItem(parseInt(props.lastSongIndex), \"start\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\" onClick={offset}>Default</Button>\r\n            <AutoSizer>\r\n                {({height, width}) => {\r\n                    return (\r\n                        <FixedSizeList\r\n                            ref={listRef}\r\n                            itemData={props.songs}\r\n                            itemCount={props.songs.length}\r\n                            overscanCount={20}\r\n                            height={height}\r\n                            width={width}\r\n                            itemSize={48}\r\n                            initialScrollOffset={parseInt(props.lastSongIndex)}\r\n                        >\r\n                            {VirtualizedListItem}\r\n                        </FixedSizeList>)\r\n                }}\r\n            </AutoSizer>\r\n        </>)\r\n\r\n}\r\n\r\n\r\nexport const SongList = ({songs, isLoading, lastSongIndex}) => {\r\n\r\n    const styles = useStyles()\r\n\r\n    if (isLoading) {\r\n        return <Spinner/>\r\n    }\r\n    return (\r\n\r\n        <Container className={styles.listContainer}>\r\n\r\n            <Typography variant={\"h4\"}>\r\n                All songs\r\n            </Typography>\r\n\r\n            {/*<List>*/}\r\n            {/*    {songs.map(item => <SongListItem song={item} key={item._id}/>)}*/}\r\n            {/*</List>*/}\r\n\r\n            <WindowsList songs={songs}\r\n                         lastSongIndex={lastSongIndex}/>\r\n\r\n            <Fab component={NavLink} to={'/new'} className={styles.fab} color=\"primary\" aria-label=\"add\">\r\n                <AddIcon/>\r\n            </Fab>\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\n//\r\n// const SongListItem = ({song}) => {\r\n//\r\n//     return <ListItem\r\n//         button\r\n//     >\r\n//         <ListItemIcon>\r\n//             {song.favor\r\n//                 ? <FavoriteIcon/>\r\n//                 : <FavoriteBorderIcon/>}\r\n//\r\n//         </ListItemIcon>\r\n//\r\n//         <ListItemText button\r\n//                       component={Link}\r\n//                       to={\"/card/\" + song._id}\r\n//                       primary={song.name}\r\n//         />\r\n//\r\n//         {/*<ListItemSecondaryAction button onClick={()=>alert('111')}>*/}\r\n//         {/*    <IconButton edge=\"end\" aria-label=\"delete\" onClick={()=>alert('111')}>*/}\r\n//         {/*        <DeleteIcon onClick={()=>alert('111')}/>*/}\r\n//         {/*    </IconButton>*/}\r\n//         {/*</ListItemSecondaryAction>*/}\r\n//     </ListItem>\r\n//\r\n// }\r\n\r\n\r\nexport default SongList\r\n\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {setTerm} from '../../redux/song-reducer'\r\nimport {getSongsListThunk, toogleFavorThunk, deleteSongThunk} from '../../redux/thunks'\r\nimport SongList from \"./SongList\";\r\nimport {createSelector} from 'reselect'\r\n\r\nconst getSongs = (state: any) => state.songReducer.songs\r\nconst getTerm = (state: any) => state.songReducer.term\r\nconst getOnlyFavor = (state: any) => state.songReducer.getOnlyFavor\r\n\r\nconst filtredSongsSelector = createSelector(\r\n    [getSongs, getTerm, getOnlyFavor],\r\n    (songs, term, getOnlyFavor) => {\r\n        let filteredSongs = songs.filter((item: any) => item.name.includes(term))\r\n\r\n        if (getOnlyFavor) {\r\n            filteredSongs = songs.filter((item: any) => item.favor)\r\n        }\r\n\r\n        const cyrillic = (a: any) => 10 > a ? 2e4 + +a : a.charCodeAt(0);\r\n        return filteredSongs.sort((a: any, b: any) => cyrillic(a.name) - cyrillic(b.name))\r\n    }\r\n)\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        songs: filtredSongsSelector(state),\r\n        term: getTerm(state),\r\n        isLoading: state.songReducer.isLoading,\r\n        getOnlyFavor: state.songReducer.getOnlyFavor,\r\n        lastSongIndex: state.songReducer.lastSongIndex\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getSongsListThunk, setTerm, toogleFavorThunk, deleteSongThunk})(SongList)\r\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport appReducer from './app-reducer'\r\nimport reducer from './song-reducer'\r\nimport { createLogger } from 'redux-logger'\r\n//\r\nconst logger = createLogger({\r\n    // collapsed: () => (true),\r\n    // predicate: (getState, action) => !action.type.includes('@@redux-form'),\r\n    level: 'log',\r\n});\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger]\r\n\r\nconst store = configureStore(\r\n    {\r\n        reducer: {songReducer: reducer, app: appReducer},\r\n        middleware\r\n    }\r\n)\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst Copyright = () => (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n            Your Website\r\n        </Link>{' '}\r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n    </Typography>\r\n)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nconst SignIn = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign in\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\nexport default SignIn\r\n","import CssBaseline from \"@material-ui/core/CssBaseline\"\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\nimport React from \"react\"\nimport {connect, Provider} from \"react-redux\"\nimport {Router, Route, Switch} from \"react-router-dom\"\nimport {compose} from \"redux\"\nimport ErrorPage from \"./components/ErrorPage/ErrorPage\"\nimport {Main} from \"./components/Info/Main\"\nimport ListContainer from \"./components/List/ListContainer\"\nimport SearchAppBar from \"./components/SearchAppBar/SearchAppBar\"\nimport NewSongForm from './components/Song/NewSongForm'\nimport SongContainer from \"./components/Song/SongContainer\"\nimport SongsListContainer from \"./components/SongList/SongsListContainer\"\nimport {initializeApp} from \"./redux/app-reducer\"\nimport store from \"./redux/store\"\nimport SignIn from \"./SignIn/SignIn\"\nimport history from './common/history';\n\n\n// type PropsType = {\n//     initialized: boolean\n//     initializeApp: () => void\n//     onSetSidebarOpen: () => void\n// }\n\nclass App extends React.Component {\n// class App extends React.Component<PropsType, StateType > {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n\n        if (this.props.error){\n            return <ErrorPage error={this.props.error} />\n        }\n\n        if (!this.props.initialized) {\n            return <LinearProgress />\n        }\n\n        const routes = (\n            <Switch>\n                <Route path='/cards/' exact render={() => <SongsListContainer/>}/>\n                <Route path='/lists/' exact render={() => <ListContainer/>}/>\n                <Route path='/sign/' exact render={() => <SignIn/>}/>\n                <Route path='/new/' exact render={() => <NewSongForm/>}/>\n                <Route path='/card/:id/:index(\\d+)?' component={SongContainer}/>\n                <Route exact component={Main}/>\n            </Switch>\n        )\n\n        return (\n            // <Layout>\n            <>\n                <CssBaseline />\n                {/*<TemporaryDrawer/>*/}\n                <SearchAppBar/>\n                {routes}\n\n            </>\n            // </Layout>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        initialized: state.app.initialized,\n        error: state.app.error\n    }\n}\n\nconst AppContainer = compose(\n    // withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst RandomCardsApp = () => {\n    return <Router history={history}>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </Router>\n\n}\nexport default RandomCardsApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomCardsApp from './App'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RandomCardsApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}